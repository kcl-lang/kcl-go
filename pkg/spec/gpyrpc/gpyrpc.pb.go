// Copyright The KCL Authors. All rights reserved.
//
// This file defines the request parameters and return structure of the KCL RPC server.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.27.0
// source: gpyrpc.proto

package gpyrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// kcl main.k -E pkg_name=pkg_path
type ExternalPkg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PkgName string `protobuf:"bytes,1,opt,name=pkg_name,json=pkgName,proto3" json:"pkg_name,omitempty"`
	PkgPath string `protobuf:"bytes,2,opt,name=pkg_path,json=pkgPath,proto3" json:"pkg_path,omitempty"`
}

func (x *ExternalPkg) Reset() {
	*x = ExternalPkg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gpyrpc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExternalPkg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalPkg) ProtoMessage() {}

func (x *ExternalPkg) ProtoReflect() protoreflect.Message {
	mi := &file_gpyrpc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalPkg.ProtoReflect.Descriptor instead.
func (*ExternalPkg) Descriptor() ([]byte, []int) {
	return file_gpyrpc_proto_rawDescGZIP(), []int{0}
}

func (x *ExternalPkg) GetPkgName() string {
	if x != nil {
		return x.PkgName
	}
	return ""
}

func (x *ExternalPkg) GetPkgPath() string {
	if x != nil {
		return x.PkgPath
	}
	return ""
}

// kcl main.k -D name=value
type Argument struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Argument) Reset() {
	*x = Argument{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gpyrpc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Argument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Argument) ProtoMessage() {}

func (x *Argument) ProtoReflect() protoreflect.Message {
	mi := &file_gpyrpc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Argument.ProtoReflect.Descriptor instead.
func (*Argument) Descriptor() ([]byte, []int) {
	return file_gpyrpc_proto_rawDescGZIP(), []int{1}
}

func (x *Argument) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Argument) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level    string     `protobuf:"bytes,1,opt,name=level,proto3" json:"level,omitempty"`
	Code     string     `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	Messages []*Message `protobuf:"bytes,3,rep,name=messages,proto3" json:"messages,omitempty"`
}

func (x *Error) Reset() {
	*x = Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gpyrpc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {}

func (x *Error) ProtoReflect() protoreflect.Message {
	mi := &file_gpyrpc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Error.ProtoReflect.Descriptor instead.
func (*Error) Descriptor() ([]byte, []int) {
	return file_gpyrpc_proto_rawDescGZIP(), []int{2}
}

func (x *Error) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

func (x *Error) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Error) GetMessages() []*Message {
	if x != nil {
		return x.Messages
	}
	return nil
}

type Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg string    `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
	Pos *Position `protobuf:"bytes,2,opt,name=pos,proto3" json:"pos,omitempty"`
}

func (x *Message) Reset() {
	*x = Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gpyrpc_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_gpyrpc_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_gpyrpc_proto_rawDescGZIP(), []int{3}
}

func (x *Message) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *Message) GetPos() *Position {
	if x != nil {
		return x.Pos
	}
	return nil
}

type Ping_Args struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Ping_Args) Reset() {
	*x = Ping_Args{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gpyrpc_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ping_Args) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ping_Args) ProtoMessage() {}

func (x *Ping_Args) ProtoReflect() protoreflect.Message {
	mi := &file_gpyrpc_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ping_Args.ProtoReflect.Descriptor instead.
func (*Ping_Args) Descriptor() ([]byte, []int) {
	return file_gpyrpc_proto_rawDescGZIP(), []int{4}
}

func (x *Ping_Args) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type Ping_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Ping_Result) Reset() {
	*x = Ping_Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gpyrpc_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ping_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ping_Result) ProtoMessage() {}

func (x *Ping_Result) ProtoReflect() protoreflect.Message {
	mi := &file_gpyrpc_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ping_Result.ProtoReflect.Descriptor instead.
func (*Ping_Result) Descriptor() ([]byte, []int) {
	return file_gpyrpc_proto_rawDescGZIP(), []int{5}
}

func (x *Ping_Result) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type ListMethod_Args struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListMethod_Args) Reset() {
	*x = ListMethod_Args{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gpyrpc_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMethod_Args) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMethod_Args) ProtoMessage() {}

func (x *ListMethod_Args) ProtoReflect() protoreflect.Message {
	mi := &file_gpyrpc_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMethod_Args.ProtoReflect.Descriptor instead.
func (*ListMethod_Args) Descriptor() ([]byte, []int) {
	return file_gpyrpc_proto_rawDescGZIP(), []int{6}
}

type ListMethod_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MethodNameList []string `protobuf:"bytes,1,rep,name=method_name_list,json=methodNameList,proto3" json:"method_name_list,omitempty"`
}

func (x *ListMethod_Result) Reset() {
	*x = ListMethod_Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gpyrpc_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMethod_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMethod_Result) ProtoMessage() {}

func (x *ListMethod_Result) ProtoReflect() protoreflect.Message {
	mi := &file_gpyrpc_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMethod_Result.ProtoReflect.Descriptor instead.
func (*ListMethod_Result) Descriptor() ([]byte, []int) {
	return file_gpyrpc_proto_rawDescGZIP(), []int{7}
}

func (x *ListMethod_Result) GetMethodNameList() []string {
	if x != nil {
		return x.MethodNameList
	}
	return nil
}

type ParseFile_Args struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path         string         `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Source       string         `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	ExternalPkgs []*ExternalPkg `protobuf:"bytes,3,rep,name=external_pkgs,json=externalPkgs,proto3" json:"external_pkgs,omitempty"` // External packages path
}

func (x *ParseFile_Args) Reset() {
	*x = ParseFile_Args{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gpyrpc_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParseFile_Args) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParseFile_Args) ProtoMessage() {}

func (x *ParseFile_Args) ProtoReflect() protoreflect.Message {
	mi := &file_gpyrpc_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParseFile_Args.ProtoReflect.Descriptor instead.
func (*ParseFile_Args) Descriptor() ([]byte, []int) {
	return file_gpyrpc_proto_rawDescGZIP(), []int{8}
}

func (x *ParseFile_Args) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *ParseFile_Args) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *ParseFile_Args) GetExternalPkgs() []*ExternalPkg {
	if x != nil {
		return x.ExternalPkgs
	}
	return nil
}

type ParseFile_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AstJson string   `protobuf:"bytes,1,opt,name=ast_json,json=astJson,proto3" json:"ast_json,omitempty"` // JSON string value
	Deps    []string `protobuf:"bytes,2,rep,name=deps,proto3" json:"deps,omitempty"`                      // file dependency paths
	Errors  []*Error `protobuf:"bytes,3,rep,name=errors,proto3" json:"errors,omitempty"`                  // Parse errors
}

func (x *ParseFile_Result) Reset() {
	*x = ParseFile_Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gpyrpc_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParseFile_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParseFile_Result) ProtoMessage() {}

func (x *ParseFile_Result) ProtoReflect() protoreflect.Message {
	mi := &file_gpyrpc_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParseFile_Result.ProtoReflect.Descriptor instead.
func (*ParseFile_Result) Descriptor() ([]byte, []int) {
	return file_gpyrpc_proto_rawDescGZIP(), []int{9}
}

func (x *ParseFile_Result) GetAstJson() string {
	if x != nil {
		return x.AstJson
	}
	return ""
}

func (x *ParseFile_Result) GetDeps() []string {
	if x != nil {
		return x.Deps
	}
	return nil
}

func (x *ParseFile_Result) GetErrors() []*Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

type ParseProgram_Args struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Paths        []string       `protobuf:"bytes,1,rep,name=paths,proto3" json:"paths,omitempty"`
	Sources      []string       `protobuf:"bytes,2,rep,name=sources,proto3" json:"sources,omitempty"`
	ExternalPkgs []*ExternalPkg `protobuf:"bytes,3,rep,name=external_pkgs,json=externalPkgs,proto3" json:"external_pkgs,omitempty"` // External packages path
}

func (x *ParseProgram_Args) Reset() {
	*x = ParseProgram_Args{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gpyrpc_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParseProgram_Args) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParseProgram_Args) ProtoMessage() {}

func (x *ParseProgram_Args) ProtoReflect() protoreflect.Message {
	mi := &file_gpyrpc_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParseProgram_Args.ProtoReflect.Descriptor instead.
func (*ParseProgram_Args) Descriptor() ([]byte, []int) {
	return file_gpyrpc_proto_rawDescGZIP(), []int{10}
}

func (x *ParseProgram_Args) GetPaths() []string {
	if x != nil {
		return x.Paths
	}
	return nil
}

func (x *ParseProgram_Args) GetSources() []string {
	if x != nil {
		return x.Sources
	}
	return nil
}

func (x *ParseProgram_Args) GetExternalPkgs() []*ExternalPkg {
	if x != nil {
		return x.ExternalPkgs
	}
	return nil
}

type ParseProgram_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AstJson string   `protobuf:"bytes,1,opt,name=ast_json,json=astJson,proto3" json:"ast_json,omitempty"` // JSON string value
	Paths   []string `protobuf:"bytes,2,rep,name=paths,proto3" json:"paths,omitempty"`                    // Returns the files in the order they should be compiled
	Errors  []*Error `protobuf:"bytes,3,rep,name=errors,proto3" json:"errors,omitempty"`                  // Parse errors
}

func (x *ParseProgram_Result) Reset() {
	*x = ParseProgram_Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gpyrpc_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParseProgram_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParseProgram_Result) ProtoMessage() {}

func (x *ParseProgram_Result) ProtoReflect() protoreflect.Message {
	mi := &file_gpyrpc_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParseProgram_Result.ProtoReflect.Descriptor instead.
func (*ParseProgram_Result) Descriptor() ([]byte, []int) {
	return file_gpyrpc_proto_rawDescGZIP(), []int{11}
}

func (x *ParseProgram_Result) GetAstJson() string {
	if x != nil {
		return x.AstJson
	}
	return ""
}

func (x *ParseProgram_Result) GetPaths() []string {
	if x != nil {
		return x.Paths
	}
	return nil
}

func (x *ParseProgram_Result) GetErrors() []*Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

type LoadPackage_Args struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParseArgs    *ParseProgram_Args `protobuf:"bytes,1,opt,name=parse_args,json=parseArgs,proto3" json:"parse_args,omitempty"`
	ResolveAst   bool               `protobuf:"varint,2,opt,name=resolve_ast,json=resolveAst,proto3" json:"resolve_ast,omitempty"`
	LoadBuiltin  bool               `protobuf:"varint,3,opt,name=load_builtin,json=loadBuiltin,proto3" json:"load_builtin,omitempty"`
	WithAstIndex bool               `protobuf:"varint,4,opt,name=with_ast_index,json=withAstIndex,proto3" json:"with_ast_index,omitempty"`
}

func (x *LoadPackage_Args) Reset() {
	*x = LoadPackage_Args{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gpyrpc_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadPackage_Args) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadPackage_Args) ProtoMessage() {}

func (x *LoadPackage_Args) ProtoReflect() protoreflect.Message {
	mi := &file_gpyrpc_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadPackage_Args.ProtoReflect.Descriptor instead.
func (*LoadPackage_Args) Descriptor() ([]byte, []int) {
	return file_gpyrpc_proto_rawDescGZIP(), []int{12}
}

func (x *LoadPackage_Args) GetParseArgs() *ParseProgram_Args {
	if x != nil {
		return x.ParseArgs
	}
	return nil
}

func (x *LoadPackage_Args) GetResolveAst() bool {
	if x != nil {
		return x.ResolveAst
	}
	return false
}

func (x *LoadPackage_Args) GetLoadBuiltin() bool {
	if x != nil {
		return x.LoadBuiltin
	}
	return false
}

func (x *LoadPackage_Args) GetWithAstIndex() bool {
	if x != nil {
		return x.WithAstIndex
	}
	return false
}

type LoadPackage_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Program               string                  `protobuf:"bytes,1,opt,name=program,proto3" json:"program,omitempty"`                                                                                                                                                      // JSON string value
	Paths                 []string                `protobuf:"bytes,2,rep,name=paths,proto3" json:"paths,omitempty"`                                                                                                                                                          // Returns the files in the order they should be compiled
	ParseErrors           []*Error                `protobuf:"bytes,3,rep,name=parse_errors,json=parseErrors,proto3" json:"parse_errors,omitempty"`                                                                                                                           // Parse errors
	TypeErrors            []*Error                `protobuf:"bytes,4,rep,name=type_errors,json=typeErrors,proto3" json:"type_errors,omitempty"`                                                                                                                              // Type errors
	Scopes                map[string]*Scope       `protobuf:"bytes,5,rep,name=scopes,proto3" json:"scopes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`                                                                // Map key is the ScopeIndex json string.
	Symbols               map[string]*Symbol      `protobuf:"bytes,6,rep,name=symbols,proto3" json:"symbols,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`                                                              // Map key is the SymbolIndex json string.
	NodeSymbolMap         map[string]*SymbolIndex `protobuf:"bytes,7,rep,name=node_symbol_map,json=nodeSymbolMap,proto3" json:"node_symbol_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`                           // Map key is the AST index UUID string.
	SymbolNodeMap         map[string]string       `protobuf:"bytes,8,rep,name=symbol_node_map,json=symbolNodeMap,proto3" json:"symbol_node_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`                           // Map key is the SymbolIndex json string.
	FullyQualifiedNameMap map[string]*SymbolIndex `protobuf:"bytes,9,rep,name=fully_qualified_name_map,json=fullyQualifiedNameMap,proto3" json:"fully_qualified_name_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // Map key is the fully_qualified_name e.g. `pkg.Name`
	PkgScopeMap           map[string]*ScopeIndex  `protobuf:"bytes,10,rep,name=pkg_scope_map,json=pkgScopeMap,proto3" json:"pkg_scope_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`                                // Map key is the package path.
}

func (x *LoadPackage_Result) Reset() {
	*x = LoadPackage_Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gpyrpc_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadPackage_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadPackage_Result) ProtoMessage() {}

func (x *LoadPackage_Result) ProtoReflect() protoreflect.Message {
	mi := &file_gpyrpc_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadPackage_Result.ProtoReflect.Descriptor instead.
func (*LoadPackage_Result) Descriptor() ([]byte, []int) {
	return file_gpyrpc_proto_rawDescGZIP(), []int{13}
}

func (x *LoadPackage_Result) GetProgram() string {
	if x != nil {
		return x.Program
	}
	return ""
}

func (x *LoadPackage_Result) GetPaths() []string {
	if x != nil {
		return x.Paths
	}
	return nil
}

func (x *LoadPackage_Result) GetParseErrors() []*Error {
	if x != nil {
		return x.ParseErrors
	}
	return nil
}

func (x *LoadPackage_Result) GetTypeErrors() []*Error {
	if x != nil {
		return x.TypeErrors
	}
	return nil
}

func (x *LoadPackage_Result) GetScopes() map[string]*Scope {
	if x != nil {
		return x.Scopes
	}
	return nil
}

func (x *LoadPackage_Result) GetSymbols() map[string]*Symbol {
	if x != nil {
		return x.Symbols
	}
	return nil
}

func (x *LoadPackage_Result) GetNodeSymbolMap() map[string]*SymbolIndex {
	if x != nil {
		return x.NodeSymbolMap
	}
	return nil
}

func (x *LoadPackage_Result) GetSymbolNodeMap() map[string]string {
	if x != nil {
		return x.SymbolNodeMap
	}
	return nil
}

func (x *LoadPackage_Result) GetFullyQualifiedNameMap() map[string]*SymbolIndex {
	if x != nil {
		return x.FullyQualifiedNameMap
	}
	return nil
}

func (x *LoadPackage_Result) GetPkgScopeMap() map[string]*ScopeIndex {
	if x != nil {
		return x.PkgScopeMap
	}
	return nil
}

type ListOptions_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Options []*OptionHelp `protobuf:"bytes,2,rep,name=options,proto3" json:"options,omitempty"` // Returns the files in the order they should be compiled
}

func (x *ListOptions_Result) Reset() {
	*x = ListOptions_Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gpyrpc_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOptions_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOptions_Result) ProtoMessage() {}

func (x *ListOptions_Result) ProtoReflect() protoreflect.Message {
	mi := &file_gpyrpc_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOptions_Result.ProtoReflect.Descriptor instead.
func (*ListOptions_Result) Descriptor() ([]byte, []int) {
	return file_gpyrpc_proto_rawDescGZIP(), []int{14}
}

func (x *ListOptions_Result) GetOptions() []*OptionHelp {
	if x != nil {
		return x.Options
	}
	return nil
}

type OptionHelp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type         string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Required     bool   `protobuf:"varint,3,opt,name=required,proto3" json:"required,omitempty"`
	DefaultValue string `protobuf:"bytes,4,opt,name=default_value,json=defaultValue,proto3" json:"default_value,omitempty"`
	Help         string `protobuf:"bytes,5,opt,name=help,proto3" json:"help,omitempty"`
}

func (x *OptionHelp) Reset() {
	*x = OptionHelp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gpyrpc_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OptionHelp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OptionHelp) ProtoMessage() {}

func (x *OptionHelp) ProtoReflect() protoreflect.Message {
	mi := &file_gpyrpc_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OptionHelp.ProtoReflect.Descriptor instead.
func (*OptionHelp) Descriptor() ([]byte, []int) {
	return file_gpyrpc_proto_rawDescGZIP(), []int{15}
}

func (x *OptionHelp) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OptionHelp) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *OptionHelp) GetRequired() bool {
	if x != nil {
		return x.Required
	}
	return false
}

func (x *OptionHelp) GetDefaultValue() string {
	if x != nil {
		return x.DefaultValue
	}
	return ""
}

func (x *OptionHelp) GetHelp() string {
	if x != nil {
		return x.Help
	}
	return ""
}

type Symbol struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ty       *KclType       `protobuf:"bytes,1,opt,name=ty,proto3" json:"ty,omitempty"`
	Name     string         `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Owner    *SymbolIndex   `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty"`
	Def      *SymbolIndex   `protobuf:"bytes,4,opt,name=def,proto3" json:"def,omitempty"`
	Attrs    []*SymbolIndex `protobuf:"bytes,5,rep,name=attrs,proto3" json:"attrs,omitempty"`
	IsGlobal bool           `protobuf:"varint,6,opt,name=is_global,json=isGlobal,proto3" json:"is_global,omitempty"`
}

func (x *Symbol) Reset() {
	*x = Symbol{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gpyrpc_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Symbol) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Symbol) ProtoMessage() {}

func (x *Symbol) ProtoReflect() protoreflect.Message {
	mi := &file_gpyrpc_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Symbol.ProtoReflect.Descriptor instead.
func (*Symbol) Descriptor() ([]byte, []int) {
	return file_gpyrpc_proto_rawDescGZIP(), []int{16}
}

func (x *Symbol) GetTy() *KclType {
	if x != nil {
		return x.Ty
	}
	return nil
}

func (x *Symbol) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Symbol) GetOwner() *SymbolIndex {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *Symbol) GetDef() *SymbolIndex {
	if x != nil {
		return x.Def
	}
	return nil
}

func (x *Symbol) GetAttrs() []*SymbolIndex {
	if x != nil {
		return x.Attrs
	}
	return nil
}

func (x *Symbol) GetIsGlobal() bool {
	if x != nil {
		return x.IsGlobal
	}
	return false
}

type Scope struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind     string         `protobuf:"bytes,1,opt,name=kind,proto3" json:"kind,omitempty"`
	Parent   *ScopeIndex    `protobuf:"bytes,2,opt,name=parent,proto3" json:"parent,omitempty"`
	Owner    *SymbolIndex   `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty"`
	Children []*ScopeIndex  `protobuf:"bytes,4,rep,name=children,proto3" json:"children,omitempty"`
	Defs     []*SymbolIndex `protobuf:"bytes,5,rep,name=defs,proto3" json:"defs,omitempty"`
}

func (x *Scope) Reset() {
	*x = Scope{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gpyrpc_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Scope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Scope) ProtoMessage() {}

func (x *Scope) ProtoReflect() protoreflect.Message {
	mi := &file_gpyrpc_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Scope.ProtoReflect.Descriptor instead.
func (*Scope) Descriptor() ([]byte, []int) {
	return file_gpyrpc_proto_rawDescGZIP(), []int{17}
}

func (x *Scope) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *Scope) GetParent() *ScopeIndex {
	if x != nil {
		return x.Parent
	}
	return nil
}

func (x *Scope) GetOwner() *SymbolIndex {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *Scope) GetChildren() []*ScopeIndex {
	if x != nil {
		return x.Children
	}
	return nil
}

func (x *Scope) GetDefs() []*SymbolIndex {
	if x != nil {
		return x.Defs
	}
	return nil
}

type SymbolIndex struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	I    uint64 `protobuf:"varint,1,opt,name=i,proto3" json:"i,omitempty"`
	G    uint64 `protobuf:"varint,2,opt,name=g,proto3" json:"g,omitempty"`
	Kind string `protobuf:"bytes,3,opt,name=kind,proto3" json:"kind,omitempty"`
}

func (x *SymbolIndex) Reset() {
	*x = SymbolIndex{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gpyrpc_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SymbolIndex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SymbolIndex) ProtoMessage() {}

func (x *SymbolIndex) ProtoReflect() protoreflect.Message {
	mi := &file_gpyrpc_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SymbolIndex.ProtoReflect.Descriptor instead.
func (*SymbolIndex) Descriptor() ([]byte, []int) {
	return file_gpyrpc_proto_rawDescGZIP(), []int{18}
}

func (x *SymbolIndex) GetI() uint64 {
	if x != nil {
		return x.I
	}
	return 0
}

func (x *SymbolIndex) GetG() uint64 {
	if x != nil {
		return x.G
	}
	return 0
}

func (x *SymbolIndex) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

type ScopeIndex struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	I    uint64 `protobuf:"varint,1,opt,name=i,proto3" json:"i,omitempty"`
	G    uint64 `protobuf:"varint,2,opt,name=g,proto3" json:"g,omitempty"`
	Kind string `protobuf:"bytes,3,opt,name=kind,proto3" json:"kind,omitempty"`
}

func (x *ScopeIndex) Reset() {
	*x = ScopeIndex{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gpyrpc_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScopeIndex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScopeIndex) ProtoMessage() {}

func (x *ScopeIndex) ProtoReflect() protoreflect.Message {
	mi := &file_gpyrpc_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScopeIndex.ProtoReflect.Descriptor instead.
func (*ScopeIndex) Descriptor() ([]byte, []int) {
	return file_gpyrpc_proto_rawDescGZIP(), []int{19}
}

func (x *ScopeIndex) GetI() uint64 {
	if x != nil {
		return x.I
	}
	return 0
}

func (x *ScopeIndex) GetG() uint64 {
	if x != nil {
		return x.G
	}
	return 0
}

func (x *ScopeIndex) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

type ExecProgram_Args struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkDir           string      `protobuf:"bytes,1,opt,name=work_dir,json=workDir,proto3" json:"work_dir,omitempty"`
	KFilenameList     []string    `protobuf:"bytes,2,rep,name=k_filename_list,json=kFilenameList,proto3" json:"k_filename_list,omitempty"`
	KCodeList         []string    `protobuf:"bytes,3,rep,name=k_code_list,json=kCodeList,proto3" json:"k_code_list,omitempty"`
	Args              []*Argument `protobuf:"bytes,4,rep,name=args,proto3" json:"args,omitempty"`
	Overrides         []string    `protobuf:"bytes,5,rep,name=overrides,proto3" json:"overrides,omitempty"`
	DisableYamlResult bool        `protobuf:"varint,6,opt,name=disable_yaml_result,json=disableYamlResult,proto3" json:"disable_yaml_result,omitempty"`
	PrintOverrideAst  bool        `protobuf:"varint,7,opt,name=print_override_ast,json=printOverrideAst,proto3" json:"print_override_ast,omitempty"`
	// -r --strict-range-check
	StrictRangeCheck bool `protobuf:"varint,8,opt,name=strict_range_check,json=strictRangeCheck,proto3" json:"strict_range_check,omitempty"`
	// -n --disable-none
	DisableNone bool `protobuf:"varint,9,opt,name=disable_none,json=disableNone,proto3" json:"disable_none,omitempty"`
	// -v --verbose
	Verbose int32 `protobuf:"varint,10,opt,name=verbose,proto3" json:"verbose,omitempty"`
	// -d --debug
	Debug int32 `protobuf:"varint,11,opt,name=debug,proto3" json:"debug,omitempty"`
	// yaml/json: sort keys
	SortKeys bool `protobuf:"varint,12,opt,name=sort_keys,json=sortKeys,proto3" json:"sort_keys,omitempty"`
	// -E --external : external packages path
	ExternalPkgs []*ExternalPkg `protobuf:"bytes,13,rep,name=external_pkgs,json=externalPkgs,proto3" json:"external_pkgs,omitempty"`
	// Whether including schema type in JSON/YAML result
	IncludeSchemaTypePath bool `protobuf:"varint,14,opt,name=include_schema_type_path,json=includeSchemaTypePath,proto3" json:"include_schema_type_path,omitempty"`
	// Whether only compiling the program
	CompileOnly bool `protobuf:"varint,15,opt,name=compile_only,json=compileOnly,proto3" json:"compile_only,omitempty"`
	// Show hidden attributes
	ShowHidden bool `protobuf:"varint,16,opt,name=show_hidden,json=showHidden,proto3" json:"show_hidden,omitempty"`
	// -S --path_selector
	PathSelector []string `protobuf:"bytes,17,rep,name=path_selector,json=pathSelector,proto3" json:"path_selector,omitempty"`
	// -K --fast_eval
	FastEval bool `protobuf:"varint,18,opt,name=fast_eval,json=fastEval,proto3" json:"fast_eval,omitempty"`
}

func (x *ExecProgram_Args) Reset() {
	*x = ExecProgram_Args{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gpyrpc_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecProgram_Args) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecProgram_Args) ProtoMessage() {}

func (x *ExecProgram_Args) ProtoReflect() protoreflect.Message {
	mi := &file_gpyrpc_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecProgram_Args.ProtoReflect.Descriptor instead.
func (*ExecProgram_Args) Descriptor() ([]byte, []int) {
	return file_gpyrpc_proto_rawDescGZIP(), []int{20}
}

func (x *ExecProgram_Args) GetWorkDir() string {
	if x != nil {
		return x.WorkDir
	}
	return ""
}

func (x *ExecProgram_Args) GetKFilenameList() []string {
	if x != nil {
		return x.KFilenameList
	}
	return nil
}

func (x *ExecProgram_Args) GetKCodeList() []string {
	if x != nil {
		return x.KCodeList
	}
	return nil
}

func (x *ExecProgram_Args) GetArgs() []*Argument {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *ExecProgram_Args) GetOverrides() []string {
	if x != nil {
		return x.Overrides
	}
	return nil
}

func (x *ExecProgram_Args) GetDisableYamlResult() bool {
	if x != nil {
		return x.DisableYamlResult
	}
	return false
}

func (x *ExecProgram_Args) GetPrintOverrideAst() bool {
	if x != nil {
		return x.PrintOverrideAst
	}
	return false
}

func (x *ExecProgram_Args) GetStrictRangeCheck() bool {
	if x != nil {
		return x.StrictRangeCheck
	}
	return false
}

func (x *ExecProgram_Args) GetDisableNone() bool {
	if x != nil {
		return x.DisableNone
	}
	return false
}

func (x *ExecProgram_Args) GetVerbose() int32 {
	if x != nil {
		return x.Verbose
	}
	return 0
}

func (x *ExecProgram_Args) GetDebug() int32 {
	if x != nil {
		return x.Debug
	}
	return 0
}

func (x *ExecProgram_Args) GetSortKeys() bool {
	if x != nil {
		return x.SortKeys
	}
	return false
}

func (x *ExecProgram_Args) GetExternalPkgs() []*ExternalPkg {
	if x != nil {
		return x.ExternalPkgs
	}
	return nil
}

func (x *ExecProgram_Args) GetIncludeSchemaTypePath() bool {
	if x != nil {
		return x.IncludeSchemaTypePath
	}
	return false
}

func (x *ExecProgram_Args) GetCompileOnly() bool {
	if x != nil {
		return x.CompileOnly
	}
	return false
}

func (x *ExecProgram_Args) GetShowHidden() bool {
	if x != nil {
		return x.ShowHidden
	}
	return false
}

func (x *ExecProgram_Args) GetPathSelector() []string {
	if x != nil {
		return x.PathSelector
	}
	return nil
}

func (x *ExecProgram_Args) GetFastEval() bool {
	if x != nil {
		return x.FastEval
	}
	return false
}

type ExecProgram_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JsonResult string `protobuf:"bytes,1,opt,name=json_result,json=jsonResult,proto3" json:"json_result,omitempty"`
	YamlResult string `protobuf:"bytes,2,opt,name=yaml_result,json=yamlResult,proto3" json:"yaml_result,omitempty"`
	LogMessage string `protobuf:"bytes,3,opt,name=log_message,json=logMessage,proto3" json:"log_message,omitempty"`
	ErrMessage string `protobuf:"bytes,4,opt,name=err_message,json=errMessage,proto3" json:"err_message,omitempty"`
}

func (x *ExecProgram_Result) Reset() {
	*x = ExecProgram_Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gpyrpc_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecProgram_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecProgram_Result) ProtoMessage() {}

func (x *ExecProgram_Result) ProtoReflect() protoreflect.Message {
	mi := &file_gpyrpc_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecProgram_Result.ProtoReflect.Descriptor instead.
func (*ExecProgram_Result) Descriptor() ([]byte, []int) {
	return file_gpyrpc_proto_rawDescGZIP(), []int{21}
}

func (x *ExecProgram_Result) GetJsonResult() string {
	if x != nil {
		return x.JsonResult
	}
	return ""
}

func (x *ExecProgram_Result) GetYamlResult() string {
	if x != nil {
		return x.YamlResult
	}
	return ""
}

func (x *ExecProgram_Result) GetLogMessage() string {
	if x != nil {
		return x.LogMessage
	}
	return ""
}

func (x *ExecProgram_Result) GetErrMessage() string {
	if x != nil {
		return x.ErrMessage
	}
	return ""
}

type BuildProgram_Args struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExecArgs *ExecProgram_Args `protobuf:"bytes,1,opt,name=exec_args,json=execArgs,proto3" json:"exec_args,omitempty"`
	Output   string            `protobuf:"bytes,2,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *BuildProgram_Args) Reset() {
	*x = BuildProgram_Args{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gpyrpc_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildProgram_Args) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildProgram_Args) ProtoMessage() {}

func (x *BuildProgram_Args) ProtoReflect() protoreflect.Message {
	mi := &file_gpyrpc_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildProgram_Args.ProtoReflect.Descriptor instead.
func (*BuildProgram_Args) Descriptor() ([]byte, []int) {
	return file_gpyrpc_proto_rawDescGZIP(), []int{22}
}

func (x *BuildProgram_Args) GetExecArgs() *ExecProgram_Args {
	if x != nil {
		return x.ExecArgs
	}
	return nil
}

func (x *BuildProgram_Args) GetOutput() string {
	if x != nil {
		return x.Output
	}
	return ""
}

type BuildProgram_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *BuildProgram_Result) Reset() {
	*x = BuildProgram_Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gpyrpc_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildProgram_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildProgram_Result) ProtoMessage() {}

func (x *BuildProgram_Result) ProtoReflect() protoreflect.Message {
	mi := &file_gpyrpc_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildProgram_Result.ProtoReflect.Descriptor instead.
func (*BuildProgram_Result) Descriptor() ([]byte, []int) {
	return file_gpyrpc_proto_rawDescGZIP(), []int{23}
}

func (x *BuildProgram_Result) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type ExecArtifact_Args struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path     string            `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	ExecArgs *ExecProgram_Args `protobuf:"bytes,2,opt,name=exec_args,json=execArgs,proto3" json:"exec_args,omitempty"`
}

func (x *ExecArtifact_Args) Reset() {
	*x = ExecArtifact_Args{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gpyrpc_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecArtifact_Args) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecArtifact_Args) ProtoMessage() {}

func (x *ExecArtifact_Args) ProtoReflect() protoreflect.Message {
	mi := &file_gpyrpc_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecArtifact_Args.ProtoReflect.Descriptor instead.
func (*ExecArtifact_Args) Descriptor() ([]byte, []int) {
	return file_gpyrpc_proto_rawDescGZIP(), []int{24}
}

func (x *ExecArtifact_Args) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *ExecArtifact_Args) GetExecArgs() *ExecProgram_Args {
	if x != nil {
		return x.ExecArgs
	}
	return nil
}

type ResetPlugin_Args struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PluginRoot string `protobuf:"bytes,1,opt,name=plugin_root,json=pluginRoot,proto3" json:"plugin_root,omitempty"`
}

func (x *ResetPlugin_Args) Reset() {
	*x = ResetPlugin_Args{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gpyrpc_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetPlugin_Args) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetPlugin_Args) ProtoMessage() {}

func (x *ResetPlugin_Args) ProtoReflect() protoreflect.Message {
	mi := &file_gpyrpc_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetPlugin_Args.ProtoReflect.Descriptor instead.
func (*ResetPlugin_Args) Descriptor() ([]byte, []int) {
	return file_gpyrpc_proto_rawDescGZIP(), []int{25}
}

func (x *ResetPlugin_Args) GetPluginRoot() string {
	if x != nil {
		return x.PluginRoot
	}
	return ""
}

type ResetPlugin_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ResetPlugin_Result) Reset() {
	*x = ResetPlugin_Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gpyrpc_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetPlugin_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetPlugin_Result) ProtoMessage() {}

func (x *ResetPlugin_Result) ProtoReflect() protoreflect.Message {
	mi := &file_gpyrpc_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetPlugin_Result.ProtoReflect.Descriptor instead.
func (*ResetPlugin_Result) Descriptor() ([]byte, []int) {
	return file_gpyrpc_proto_rawDescGZIP(), []int{26}
}

type FormatCode_Args struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source string `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
}

func (x *FormatCode_Args) Reset() {
	*x = FormatCode_Args{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gpyrpc_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FormatCode_Args) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FormatCode_Args) ProtoMessage() {}

func (x *FormatCode_Args) ProtoReflect() protoreflect.Message {
	mi := &file_gpyrpc_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FormatCode_Args.ProtoReflect.Descriptor instead.
func (*FormatCode_Args) Descriptor() ([]byte, []int) {
	return file_gpyrpc_proto_rawDescGZIP(), []int{27}
}

func (x *FormatCode_Args) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

type FormatCode_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Formatted []byte `protobuf:"bytes,1,opt,name=formatted,proto3" json:"formatted,omitempty"`
}

func (x *FormatCode_Result) Reset() {
	*x = FormatCode_Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gpyrpc_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FormatCode_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FormatCode_Result) ProtoMessage() {}

func (x *FormatCode_Result) ProtoReflect() protoreflect.Message {
	mi := &file_gpyrpc_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FormatCode_Result.ProtoReflect.Descriptor instead.
func (*FormatCode_Result) Descriptor() ([]byte, []int) {
	return file_gpyrpc_proto_rawDescGZIP(), []int{28}
}

func (x *FormatCode_Result) GetFormatted() []byte {
	if x != nil {
		return x.Formatted
	}
	return nil
}

type FormatPath_Args struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *FormatPath_Args) Reset() {
	*x = FormatPath_Args{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gpyrpc_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FormatPath_Args) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FormatPath_Args) ProtoMessage() {}

func (x *FormatPath_Args) ProtoReflect() protoreflect.Message {
	mi := &file_gpyrpc_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FormatPath_Args.ProtoReflect.Descriptor instead.
func (*FormatPath_Args) Descriptor() ([]byte, []int) {
	return file_gpyrpc_proto_rawDescGZIP(), []int{29}
}

func (x *FormatPath_Args) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type FormatPath_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChangedPaths []string `protobuf:"bytes,1,rep,name=changed_paths,json=changedPaths,proto3" json:"changed_paths,omitempty"`
}

func (x *FormatPath_Result) Reset() {
	*x = FormatPath_Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gpyrpc_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FormatPath_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FormatPath_Result) ProtoMessage() {}

func (x *FormatPath_Result) ProtoReflect() protoreflect.Message {
	mi := &file_gpyrpc_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FormatPath_Result.ProtoReflect.Descriptor instead.
func (*FormatPath_Result) Descriptor() ([]byte, []int) {
	return file_gpyrpc_proto_rawDescGZIP(), []int{30}
}

func (x *FormatPath_Result) GetChangedPaths() []string {
	if x != nil {
		return x.ChangedPaths
	}
	return nil
}

type LintPath_Args struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Paths []string `protobuf:"bytes,1,rep,name=paths,proto3" json:"paths,omitempty"`
}

func (x *LintPath_Args) Reset() {
	*x = LintPath_Args{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gpyrpc_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LintPath_Args) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LintPath_Args) ProtoMessage() {}

func (x *LintPath_Args) ProtoReflect() protoreflect.Message {
	mi := &file_gpyrpc_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LintPath_Args.ProtoReflect.Descriptor instead.
func (*LintPath_Args) Descriptor() ([]byte, []int) {
	return file_gpyrpc_proto_rawDescGZIP(), []int{31}
}

func (x *LintPath_Args) GetPaths() []string {
	if x != nil {
		return x.Paths
	}
	return nil
}

type LintPath_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []string `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *LintPath_Result) Reset() {
	*x = LintPath_Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gpyrpc_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LintPath_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LintPath_Result) ProtoMessage() {}

func (x *LintPath_Result) ProtoReflect() protoreflect.Message {
	mi := &file_gpyrpc_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LintPath_Result.ProtoReflect.Descriptor instead.
func (*LintPath_Result) Descriptor() ([]byte, []int) {
	return file_gpyrpc_proto_rawDescGZIP(), []int{32}
}

func (x *LintPath_Result) GetResults() []string {
	if x != nil {
		return x.Results
	}
	return nil
}

type OverrideFile_Args struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	File        string   `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty"`
	Specs       []string `protobuf:"bytes,2,rep,name=specs,proto3" json:"specs,omitempty"`
	ImportPaths []string `protobuf:"bytes,3,rep,name=import_paths,json=importPaths,proto3" json:"import_paths,omitempty"`
}

func (x *OverrideFile_Args) Reset() {
	*x = OverrideFile_Args{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gpyrpc_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OverrideFile_Args) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OverrideFile_Args) ProtoMessage() {}

func (x *OverrideFile_Args) ProtoReflect() protoreflect.Message {
	mi := &file_gpyrpc_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OverrideFile_Args.ProtoReflect.Descriptor instead.
func (*OverrideFile_Args) Descriptor() ([]byte, []int) {
	return file_gpyrpc_proto_rawDescGZIP(), []int{33}
}

func (x *OverrideFile_Args) GetFile() string {
	if x != nil {
		return x.File
	}
	return ""
}

func (x *OverrideFile_Args) GetSpecs() []string {
	if x != nil {
		return x.Specs
	}
	return nil
}

func (x *OverrideFile_Args) GetImportPaths() []string {
	if x != nil {
		return x.ImportPaths
	}
	return nil
}

type OverrideFile_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result      bool     `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	ParseErrors []*Error `protobuf:"bytes,2,rep,name=parse_errors,json=parseErrors,proto3" json:"parse_errors,omitempty"`
}

func (x *OverrideFile_Result) Reset() {
	*x = OverrideFile_Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gpyrpc_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OverrideFile_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OverrideFile_Result) ProtoMessage() {}

func (x *OverrideFile_Result) ProtoReflect() protoreflect.Message {
	mi := &file_gpyrpc_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OverrideFile_Result.ProtoReflect.Descriptor instead.
func (*OverrideFile_Result) Descriptor() ([]byte, []int) {
	return file_gpyrpc_proto_rawDescGZIP(), []int{34}
}

func (x *OverrideFile_Result) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *OverrideFile_Result) GetParseErrors() []*Error {
	if x != nil {
		return x.ParseErrors
	}
	return nil
}

type ListVariables_Options struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MergeProgram bool `protobuf:"varint,1,opt,name=merge_program,json=mergeProgram,proto3" json:"merge_program,omitempty"`
}

func (x *ListVariables_Options) Reset() {
	*x = ListVariables_Options{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gpyrpc_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListVariables_Options) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVariables_Options) ProtoMessage() {}

func (x *ListVariables_Options) ProtoReflect() protoreflect.Message {
	mi := &file_gpyrpc_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVariables_Options.ProtoReflect.Descriptor instead.
func (*ListVariables_Options) Descriptor() ([]byte, []int) {
	return file_gpyrpc_proto_rawDescGZIP(), []int{35}
}

func (x *ListVariables_Options) GetMergeProgram() bool {
	if x != nil {
		return x.MergeProgram
	}
	return false
}

type VariableList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Variables []*Variable `protobuf:"bytes,1,rep,name=variables,proto3" json:"variables,omitempty"`
}

func (x *VariableList) Reset() {
	*x = VariableList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gpyrpc_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VariableList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VariableList) ProtoMessage() {}

func (x *VariableList) ProtoReflect() protoreflect.Message {
	mi := &file_gpyrpc_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VariableList.ProtoReflect.Descriptor instead.
func (*VariableList) Descriptor() ([]byte, []int) {
	return file_gpyrpc_proto_rawDescGZIP(), []int{36}
}

func (x *VariableList) GetVariables() []*Variable {
	if x != nil {
		return x.Variables
	}
	return nil
}

type ListVariables_Args struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Files   []string               `protobuf:"bytes,1,rep,name=files,proto3" json:"files,omitempty"`
	Specs   []string               `protobuf:"bytes,2,rep,name=specs,proto3" json:"specs,omitempty"`
	Options *ListVariables_Options `protobuf:"bytes,3,opt,name=options,proto3" json:"options,omitempty"`
}

func (x *ListVariables_Args) Reset() {
	*x = ListVariables_Args{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gpyrpc_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListVariables_Args) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVariables_Args) ProtoMessage() {}

func (x *ListVariables_Args) ProtoReflect() protoreflect.Message {
	mi := &file_gpyrpc_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVariables_Args.ProtoReflect.Descriptor instead.
func (*ListVariables_Args) Descriptor() ([]byte, []int) {
	return file_gpyrpc_proto_rawDescGZIP(), []int{37}
}

func (x *ListVariables_Args) GetFiles() []string {
	if x != nil {
		return x.Files
	}
	return nil
}

func (x *ListVariables_Args) GetSpecs() []string {
	if x != nil {
		return x.Specs
	}
	return nil
}

func (x *ListVariables_Args) GetOptions() *ListVariables_Options {
	if x != nil {
		return x.Options
	}
	return nil
}

type ListVariables_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Variables        map[string]*VariableList `protobuf:"bytes,1,rep,name=variables,proto3" json:"variables,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	UnsupportedCodes []string                 `protobuf:"bytes,2,rep,name=unsupported_codes,json=unsupportedCodes,proto3" json:"unsupported_codes,omitempty"`
	ParseErrors      []*Error                 `protobuf:"bytes,3,rep,name=parse_errors,json=parseErrors,proto3" json:"parse_errors,omitempty"`
}

func (x *ListVariables_Result) Reset() {
	*x = ListVariables_Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gpyrpc_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListVariables_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVariables_Result) ProtoMessage() {}

func (x *ListVariables_Result) ProtoReflect() protoreflect.Message {
	mi := &file_gpyrpc_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVariables_Result.ProtoReflect.Descriptor instead.
func (*ListVariables_Result) Descriptor() ([]byte, []int) {
	return file_gpyrpc_proto_rawDescGZIP(), []int{38}
}

func (x *ListVariables_Result) GetVariables() map[string]*VariableList {
	if x != nil {
		return x.Variables
	}
	return nil
}

func (x *ListVariables_Result) GetUnsupportedCodes() []string {
	if x != nil {
		return x.UnsupportedCodes
	}
	return nil
}

func (x *ListVariables_Result) GetParseErrors() []*Error {
	if x != nil {
		return x.ParseErrors
	}
	return nil
}

type Variable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value       string      `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	TypeName    string      `protobuf:"bytes,2,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`
	OpSym       string      `protobuf:"bytes,3,opt,name=op_sym,json=opSym,proto3" json:"op_sym,omitempty"`
	ListItems   []*Variable `protobuf:"bytes,4,rep,name=list_items,json=listItems,proto3" json:"list_items,omitempty"`
	DictEntries []*MapEntry `protobuf:"bytes,5,rep,name=dict_entries,json=dictEntries,proto3" json:"dict_entries,omitempty"`
}

func (x *Variable) Reset() {
	*x = Variable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gpyrpc_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Variable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Variable) ProtoMessage() {}

func (x *Variable) ProtoReflect() protoreflect.Message {
	mi := &file_gpyrpc_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Variable.ProtoReflect.Descriptor instead.
func (*Variable) Descriptor() ([]byte, []int) {
	return file_gpyrpc_proto_rawDescGZIP(), []int{39}
}

func (x *Variable) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *Variable) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *Variable) GetOpSym() string {
	if x != nil {
		return x.OpSym
	}
	return ""
}

func (x *Variable) GetListItems() []*Variable {
	if x != nil {
		return x.ListItems
	}
	return nil
}

func (x *Variable) GetDictEntries() []*MapEntry {
	if x != nil {
		return x.DictEntries
	}
	return nil
}

type MapEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string    `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value *Variable `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *MapEntry) Reset() {
	*x = MapEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gpyrpc_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapEntry) ProtoMessage() {}

func (x *MapEntry) ProtoReflect() protoreflect.Message {
	mi := &file_gpyrpc_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapEntry.ProtoReflect.Descriptor instead.
func (*MapEntry) Descriptor() ([]byte, []int) {
	return file_gpyrpc_proto_rawDescGZIP(), []int{40}
}

func (x *MapEntry) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *MapEntry) GetValue() *Variable {
	if x != nil {
		return x.Value
	}
	return nil
}

type GetSchemaTypeMapping_Args struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExecArgs   *ExecProgram_Args `protobuf:"bytes,1,opt,name=exec_args,json=execArgs,proto3" json:"exec_args,omitempty"`
	SchemaName string            `protobuf:"bytes,2,opt,name=schema_name,json=schemaName,proto3" json:"schema_name,omitempty"`
}

func (x *GetSchemaTypeMapping_Args) Reset() {
	*x = GetSchemaTypeMapping_Args{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gpyrpc_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSchemaTypeMapping_Args) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSchemaTypeMapping_Args) ProtoMessage() {}

func (x *GetSchemaTypeMapping_Args) ProtoReflect() protoreflect.Message {
	mi := &file_gpyrpc_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSchemaTypeMapping_Args.ProtoReflect.Descriptor instead.
func (*GetSchemaTypeMapping_Args) Descriptor() ([]byte, []int) {
	return file_gpyrpc_proto_rawDescGZIP(), []int{41}
}

func (x *GetSchemaTypeMapping_Args) GetExecArgs() *ExecProgram_Args {
	if x != nil {
		return x.ExecArgs
	}
	return nil
}

func (x *GetSchemaTypeMapping_Args) GetSchemaName() string {
	if x != nil {
		return x.SchemaName
	}
	return ""
}

type GetSchemaTypeMapping_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SchemaTypeMapping map[string]*KclType `protobuf:"bytes,1,rep,name=schema_type_mapping,json=schemaTypeMapping,proto3" json:"schema_type_mapping,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetSchemaTypeMapping_Result) Reset() {
	*x = GetSchemaTypeMapping_Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gpyrpc_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSchemaTypeMapping_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSchemaTypeMapping_Result) ProtoMessage() {}

func (x *GetSchemaTypeMapping_Result) ProtoReflect() protoreflect.Message {
	mi := &file_gpyrpc_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSchemaTypeMapping_Result.ProtoReflect.Descriptor instead.
func (*GetSchemaTypeMapping_Result) Descriptor() ([]byte, []int) {
	return file_gpyrpc_proto_rawDescGZIP(), []int{42}
}

func (x *GetSchemaTypeMapping_Result) GetSchemaTypeMapping() map[string]*KclType {
	if x != nil {
		return x.SchemaTypeMapping
	}
	return nil
}

type ValidateCode_Args struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Datafile      string `protobuf:"bytes,1,opt,name=datafile,proto3" json:"datafile,omitempty"`
	Data          string `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	File          string `protobuf:"bytes,3,opt,name=file,proto3" json:"file,omitempty"`
	Code          string `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
	Schema        string `protobuf:"bytes,5,opt,name=schema,proto3" json:"schema,omitempty"`
	AttributeName string `protobuf:"bytes,6,opt,name=attribute_name,json=attributeName,proto3" json:"attribute_name,omitempty"`
	Format        string `protobuf:"bytes,7,opt,name=format,proto3" json:"format,omitempty"`
}

func (x *ValidateCode_Args) Reset() {
	*x = ValidateCode_Args{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gpyrpc_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateCode_Args) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateCode_Args) ProtoMessage() {}

func (x *ValidateCode_Args) ProtoReflect() protoreflect.Message {
	mi := &file_gpyrpc_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateCode_Args.ProtoReflect.Descriptor instead.
func (*ValidateCode_Args) Descriptor() ([]byte, []int) {
	return file_gpyrpc_proto_rawDescGZIP(), []int{43}
}

func (x *ValidateCode_Args) GetDatafile() string {
	if x != nil {
		return x.Datafile
	}
	return ""
}

func (x *ValidateCode_Args) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *ValidateCode_Args) GetFile() string {
	if x != nil {
		return x.File
	}
	return ""
}

func (x *ValidateCode_Args) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *ValidateCode_Args) GetSchema() string {
	if x != nil {
		return x.Schema
	}
	return ""
}

func (x *ValidateCode_Args) GetAttributeName() string {
	if x != nil {
		return x.AttributeName
	}
	return ""
}

func (x *ValidateCode_Args) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

type ValidateCode_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success    bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	ErrMessage string `protobuf:"bytes,2,opt,name=err_message,json=errMessage,proto3" json:"err_message,omitempty"`
}

func (x *ValidateCode_Result) Reset() {
	*x = ValidateCode_Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gpyrpc_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateCode_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateCode_Result) ProtoMessage() {}

func (x *ValidateCode_Result) ProtoReflect() protoreflect.Message {
	mi := &file_gpyrpc_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateCode_Result.ProtoReflect.Descriptor instead.
func (*ValidateCode_Result) Descriptor() ([]byte, []int) {
	return file_gpyrpc_proto_rawDescGZIP(), []int{44}
}

func (x *ValidateCode_Result) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ValidateCode_Result) GetErrMessage() string {
	if x != nil {
		return x.ErrMessage
	}
	return ""
}

type Position struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Line     int64  `protobuf:"varint,1,opt,name=line,proto3" json:"line,omitempty"`
	Column   int64  `protobuf:"varint,2,opt,name=column,proto3" json:"column,omitempty"`
	Filename string `protobuf:"bytes,3,opt,name=filename,proto3" json:"filename,omitempty"`
}

func (x *Position) Reset() {
	*x = Position{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gpyrpc_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Position) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Position) ProtoMessage() {}

func (x *Position) ProtoReflect() protoreflect.Message {
	mi := &file_gpyrpc_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Position.ProtoReflect.Descriptor instead.
func (*Position) Descriptor() ([]byte, []int) {
	return file_gpyrpc_proto_rawDescGZIP(), []int{45}
}

func (x *Position) GetLine() int64 {
	if x != nil {
		return x.Line
	}
	return 0
}

func (x *Position) GetColumn() int64 {
	if x != nil {
		return x.Column
	}
	return 0
}

func (x *Position) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

type ListDepFiles_Args struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkDir       string `protobuf:"bytes,1,opt,name=work_dir,json=workDir,proto3" json:"work_dir,omitempty"`
	UseAbsPath    bool   `protobuf:"varint,2,opt,name=use_abs_path,json=useAbsPath,proto3" json:"use_abs_path,omitempty"`
	IncludeAll    bool   `protobuf:"varint,3,opt,name=include_all,json=includeAll,proto3" json:"include_all,omitempty"`
	UseFastParser bool   `protobuf:"varint,4,opt,name=use_fast_parser,json=useFastParser,proto3" json:"use_fast_parser,omitempty"`
}

func (x *ListDepFiles_Args) Reset() {
	*x = ListDepFiles_Args{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gpyrpc_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDepFiles_Args) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDepFiles_Args) ProtoMessage() {}

func (x *ListDepFiles_Args) ProtoReflect() protoreflect.Message {
	mi := &file_gpyrpc_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDepFiles_Args.ProtoReflect.Descriptor instead.
func (*ListDepFiles_Args) Descriptor() ([]byte, []int) {
	return file_gpyrpc_proto_rawDescGZIP(), []int{46}
}

func (x *ListDepFiles_Args) GetWorkDir() string {
	if x != nil {
		return x.WorkDir
	}
	return ""
}

func (x *ListDepFiles_Args) GetUseAbsPath() bool {
	if x != nil {
		return x.UseAbsPath
	}
	return false
}

func (x *ListDepFiles_Args) GetIncludeAll() bool {
	if x != nil {
		return x.IncludeAll
	}
	return false
}

func (x *ListDepFiles_Args) GetUseFastParser() bool {
	if x != nil {
		return x.UseFastParser
	}
	return false
}

type ListDepFiles_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pkgroot string   `protobuf:"bytes,1,opt,name=pkgroot,proto3" json:"pkgroot,omitempty"`
	Pkgpath string   `protobuf:"bytes,2,opt,name=pkgpath,proto3" json:"pkgpath,omitempty"`
	Files   []string `protobuf:"bytes,3,rep,name=files,proto3" json:"files,omitempty"`
}

func (x *ListDepFiles_Result) Reset() {
	*x = ListDepFiles_Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gpyrpc_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDepFiles_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDepFiles_Result) ProtoMessage() {}

func (x *ListDepFiles_Result) ProtoReflect() protoreflect.Message {
	mi := &file_gpyrpc_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDepFiles_Result.ProtoReflect.Descriptor instead.
func (*ListDepFiles_Result) Descriptor() ([]byte, []int) {
	return file_gpyrpc_proto_rawDescGZIP(), []int{47}
}

func (x *ListDepFiles_Result) GetPkgroot() string {
	if x != nil {
		return x.Pkgroot
	}
	return ""
}

func (x *ListDepFiles_Result) GetPkgpath() string {
	if x != nil {
		return x.Pkgpath
	}
	return ""
}

func (x *ListDepFiles_Result) GetFiles() []string {
	if x != nil {
		return x.Files
	}
	return nil
}

type LoadSettingsFiles_Args struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkDir string   `protobuf:"bytes,1,opt,name=work_dir,json=workDir,proto3" json:"work_dir,omitempty"`
	Files   []string `protobuf:"bytes,2,rep,name=files,proto3" json:"files,omitempty"`
}

func (x *LoadSettingsFiles_Args) Reset() {
	*x = LoadSettingsFiles_Args{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gpyrpc_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadSettingsFiles_Args) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadSettingsFiles_Args) ProtoMessage() {}

func (x *LoadSettingsFiles_Args) ProtoReflect() protoreflect.Message {
	mi := &file_gpyrpc_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadSettingsFiles_Args.ProtoReflect.Descriptor instead.
func (*LoadSettingsFiles_Args) Descriptor() ([]byte, []int) {
	return file_gpyrpc_proto_rawDescGZIP(), []int{48}
}

func (x *LoadSettingsFiles_Args) GetWorkDir() string {
	if x != nil {
		return x.WorkDir
	}
	return ""
}

func (x *LoadSettingsFiles_Args) GetFiles() []string {
	if x != nil {
		return x.Files
	}
	return nil
}

type LoadSettingsFiles_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KclCliConfigs *CliConfig      `protobuf:"bytes,1,opt,name=kcl_cli_configs,json=kclCliConfigs,proto3" json:"kcl_cli_configs,omitempty"`
	KclOptions    []*KeyValuePair `protobuf:"bytes,2,rep,name=kcl_options,json=kclOptions,proto3" json:"kcl_options,omitempty"`
}

func (x *LoadSettingsFiles_Result) Reset() {
	*x = LoadSettingsFiles_Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gpyrpc_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadSettingsFiles_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadSettingsFiles_Result) ProtoMessage() {}

func (x *LoadSettingsFiles_Result) ProtoReflect() protoreflect.Message {
	mi := &file_gpyrpc_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadSettingsFiles_Result.ProtoReflect.Descriptor instead.
func (*LoadSettingsFiles_Result) Descriptor() ([]byte, []int) {
	return file_gpyrpc_proto_rawDescGZIP(), []int{49}
}

func (x *LoadSettingsFiles_Result) GetKclCliConfigs() *CliConfig {
	if x != nil {
		return x.KclCliConfigs
	}
	return nil
}

func (x *LoadSettingsFiles_Result) GetKclOptions() []*KeyValuePair {
	if x != nil {
		return x.KclOptions
	}
	return nil
}

type CliConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Files                 []string `protobuf:"bytes,1,rep,name=files,proto3" json:"files,omitempty"`
	Output                string   `protobuf:"bytes,2,opt,name=output,proto3" json:"output,omitempty"`
	Overrides             []string `protobuf:"bytes,3,rep,name=overrides,proto3" json:"overrides,omitempty"`
	PathSelector          []string `protobuf:"bytes,4,rep,name=path_selector,json=pathSelector,proto3" json:"path_selector,omitempty"`
	StrictRangeCheck      bool     `protobuf:"varint,5,opt,name=strict_range_check,json=strictRangeCheck,proto3" json:"strict_range_check,omitempty"`
	DisableNone           bool     `protobuf:"varint,6,opt,name=disable_none,json=disableNone,proto3" json:"disable_none,omitempty"`
	Verbose               int64    `protobuf:"varint,7,opt,name=verbose,proto3" json:"verbose,omitempty"`
	Debug                 bool     `protobuf:"varint,8,opt,name=debug,proto3" json:"debug,omitempty"`
	SortKeys              bool     `protobuf:"varint,9,opt,name=sort_keys,json=sortKeys,proto3" json:"sort_keys,omitempty"`
	ShowHidden            bool     `protobuf:"varint,10,opt,name=show_hidden,json=showHidden,proto3" json:"show_hidden,omitempty"`
	IncludeSchemaTypePath bool     `protobuf:"varint,11,opt,name=include_schema_type_path,json=includeSchemaTypePath,proto3" json:"include_schema_type_path,omitempty"`
	FastEval              bool     `protobuf:"varint,12,opt,name=fast_eval,json=fastEval,proto3" json:"fast_eval,omitempty"`
}

func (x *CliConfig) Reset() {
	*x = CliConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gpyrpc_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CliConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CliConfig) ProtoMessage() {}

func (x *CliConfig) ProtoReflect() protoreflect.Message {
	mi := &file_gpyrpc_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CliConfig.ProtoReflect.Descriptor instead.
func (*CliConfig) Descriptor() ([]byte, []int) {
	return file_gpyrpc_proto_rawDescGZIP(), []int{50}
}

func (x *CliConfig) GetFiles() []string {
	if x != nil {
		return x.Files
	}
	return nil
}

func (x *CliConfig) GetOutput() string {
	if x != nil {
		return x.Output
	}
	return ""
}

func (x *CliConfig) GetOverrides() []string {
	if x != nil {
		return x.Overrides
	}
	return nil
}

func (x *CliConfig) GetPathSelector() []string {
	if x != nil {
		return x.PathSelector
	}
	return nil
}

func (x *CliConfig) GetStrictRangeCheck() bool {
	if x != nil {
		return x.StrictRangeCheck
	}
	return false
}

func (x *CliConfig) GetDisableNone() bool {
	if x != nil {
		return x.DisableNone
	}
	return false
}

func (x *CliConfig) GetVerbose() int64 {
	if x != nil {
		return x.Verbose
	}
	return 0
}

func (x *CliConfig) GetDebug() bool {
	if x != nil {
		return x.Debug
	}
	return false
}

func (x *CliConfig) GetSortKeys() bool {
	if x != nil {
		return x.SortKeys
	}
	return false
}

func (x *CliConfig) GetShowHidden() bool {
	if x != nil {
		return x.ShowHidden
	}
	return false
}

func (x *CliConfig) GetIncludeSchemaTypePath() bool {
	if x != nil {
		return x.IncludeSchemaTypePath
	}
	return false
}

func (x *CliConfig) GetFastEval() bool {
	if x != nil {
		return x.FastEval
	}
	return false
}

type KeyValuePair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *KeyValuePair) Reset() {
	*x = KeyValuePair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gpyrpc_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyValuePair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyValuePair) ProtoMessage() {}

func (x *KeyValuePair) ProtoReflect() protoreflect.Message {
	mi := &file_gpyrpc_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyValuePair.ProtoReflect.Descriptor instead.
func (*KeyValuePair) Descriptor() ([]byte, []int) {
	return file_gpyrpc_proto_rawDescGZIP(), []int{51}
}

func (x *KeyValuePair) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *KeyValuePair) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type Rename_Args struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PackageRoot string   `protobuf:"bytes,1,opt,name=package_root,json=packageRoot,proto3" json:"package_root,omitempty"` // the file path to the package root
	SymbolPath  string   `protobuf:"bytes,2,opt,name=symbol_path,json=symbolPath,proto3" json:"symbol_path,omitempty"`    // the path to the target symbol to be renamed. The symbol path should conform to format: `<pkgpath>:<field_path>` When the pkgpath is '__main__', `<pkgpath>:` can be omitted.
	FilePaths   []string `protobuf:"bytes,3,rep,name=file_paths,json=filePaths,proto3" json:"file_paths,omitempty"`       // the paths to the source code files
	NewName     string   `protobuf:"bytes,4,opt,name=new_name,json=newName,proto3" json:"new_name,omitempty"`             // the new name of the symbol
}

func (x *Rename_Args) Reset() {
	*x = Rename_Args{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gpyrpc_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rename_Args) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rename_Args) ProtoMessage() {}

func (x *Rename_Args) ProtoReflect() protoreflect.Message {
	mi := &file_gpyrpc_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rename_Args.ProtoReflect.Descriptor instead.
func (*Rename_Args) Descriptor() ([]byte, []int) {
	return file_gpyrpc_proto_rawDescGZIP(), []int{52}
}

func (x *Rename_Args) GetPackageRoot() string {
	if x != nil {
		return x.PackageRoot
	}
	return ""
}

func (x *Rename_Args) GetSymbolPath() string {
	if x != nil {
		return x.SymbolPath
	}
	return ""
}

func (x *Rename_Args) GetFilePaths() []string {
	if x != nil {
		return x.FilePaths
	}
	return nil
}

func (x *Rename_Args) GetNewName() string {
	if x != nil {
		return x.NewName
	}
	return ""
}

type Rename_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChangedFiles []string `protobuf:"bytes,1,rep,name=changed_files,json=changedFiles,proto3" json:"changed_files,omitempty"` // the file paths got changed
}

func (x *Rename_Result) Reset() {
	*x = Rename_Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gpyrpc_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rename_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rename_Result) ProtoMessage() {}

func (x *Rename_Result) ProtoReflect() protoreflect.Message {
	mi := &file_gpyrpc_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rename_Result.ProtoReflect.Descriptor instead.
func (*Rename_Result) Descriptor() ([]byte, []int) {
	return file_gpyrpc_proto_rawDescGZIP(), []int{53}
}

func (x *Rename_Result) GetChangedFiles() []string {
	if x != nil {
		return x.ChangedFiles
	}
	return nil
}

type RenameCode_Args struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PackageRoot string            `protobuf:"bytes,1,opt,name=package_root,json=packageRoot,proto3" json:"package_root,omitempty"`                                                                                         // the file path to the package root
	SymbolPath  string            `protobuf:"bytes,2,opt,name=symbol_path,json=symbolPath,proto3" json:"symbol_path,omitempty"`                                                                                            // the path to the target symbol to be renamed. The symbol path should conform to format: `<pkgpath>:<field_path>` When the pkgpath is '__main__', `<pkgpath>:` can be omitted.
	SourceCodes map[string]string `protobuf:"bytes,3,rep,name=source_codes,json=sourceCodes,proto3" json:"source_codes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // the source code. a <filename>:<code> map
	NewName     string            `protobuf:"bytes,4,opt,name=new_name,json=newName,proto3" json:"new_name,omitempty"`                                                                                                     // the new name of the symbol
}

func (x *RenameCode_Args) Reset() {
	*x = RenameCode_Args{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gpyrpc_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenameCode_Args) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenameCode_Args) ProtoMessage() {}

func (x *RenameCode_Args) ProtoReflect() protoreflect.Message {
	mi := &file_gpyrpc_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenameCode_Args.ProtoReflect.Descriptor instead.
func (*RenameCode_Args) Descriptor() ([]byte, []int) {
	return file_gpyrpc_proto_rawDescGZIP(), []int{54}
}

func (x *RenameCode_Args) GetPackageRoot() string {
	if x != nil {
		return x.PackageRoot
	}
	return ""
}

func (x *RenameCode_Args) GetSymbolPath() string {
	if x != nil {
		return x.SymbolPath
	}
	return ""
}

func (x *RenameCode_Args) GetSourceCodes() map[string]string {
	if x != nil {
		return x.SourceCodes
	}
	return nil
}

func (x *RenameCode_Args) GetNewName() string {
	if x != nil {
		return x.NewName
	}
	return ""
}

type RenameCode_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChangedCodes map[string]string `protobuf:"bytes,1,rep,name=changed_codes,json=changedCodes,proto3" json:"changed_codes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // the changed code. a <filename>:<code> map
}

func (x *RenameCode_Result) Reset() {
	*x = RenameCode_Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gpyrpc_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenameCode_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenameCode_Result) ProtoMessage() {}

func (x *RenameCode_Result) ProtoReflect() protoreflect.Message {
	mi := &file_gpyrpc_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenameCode_Result.ProtoReflect.Descriptor instead.
func (*RenameCode_Result) Descriptor() ([]byte, []int) {
	return file_gpyrpc_proto_rawDescGZIP(), []int{55}
}

func (x *RenameCode_Result) GetChangedCodes() map[string]string {
	if x != nil {
		return x.ChangedCodes
	}
	return nil
}

type Test_Args struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExecArgs  *ExecProgram_Args `protobuf:"bytes,1,opt,name=exec_args,json=execArgs,proto3" json:"exec_args,omitempty"`    // This field stores the execution program arguments.
	PkgList   []string          `protobuf:"bytes,2,rep,name=pkg_list,json=pkgList,proto3" json:"pkg_list,omitempty"`       // The package path list to be tested e.g., "./...", "/path/to/package/", "/path/to/package/..."
	RunRegexp string            `protobuf:"bytes,3,opt,name=run_regexp,json=runRegexp,proto3" json:"run_regexp,omitempty"` // This field stores a regular expression for filtering tests to run.
	FailFast  bool              `protobuf:"varint,4,opt,name=fail_fast,json=failFast,proto3" json:"fail_fast,omitempty"`   // This field determines whether the test run should stop on the first failure.
}

func (x *Test_Args) Reset() {
	*x = Test_Args{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gpyrpc_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Test_Args) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Test_Args) ProtoMessage() {}

func (x *Test_Args) ProtoReflect() protoreflect.Message {
	mi := &file_gpyrpc_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Test_Args.ProtoReflect.Descriptor instead.
func (*Test_Args) Descriptor() ([]byte, []int) {
	return file_gpyrpc_proto_rawDescGZIP(), []int{56}
}

func (x *Test_Args) GetExecArgs() *ExecProgram_Args {
	if x != nil {
		return x.ExecArgs
	}
	return nil
}

func (x *Test_Args) GetPkgList() []string {
	if x != nil {
		return x.PkgList
	}
	return nil
}

func (x *Test_Args) GetRunRegexp() string {
	if x != nil {
		return x.RunRegexp
	}
	return ""
}

func (x *Test_Args) GetFailFast() bool {
	if x != nil {
		return x.FailFast
	}
	return false
}

type Test_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info []*TestCaseInfo `protobuf:"bytes,2,rep,name=info,proto3" json:"info,omitempty"`
}

func (x *Test_Result) Reset() {
	*x = Test_Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gpyrpc_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Test_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Test_Result) ProtoMessage() {}

func (x *Test_Result) ProtoReflect() protoreflect.Message {
	mi := &file_gpyrpc_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Test_Result.ProtoReflect.Descriptor instead.
func (*Test_Result) Descriptor() ([]byte, []int) {
	return file_gpyrpc_proto_rawDescGZIP(), []int{57}
}

func (x *Test_Result) GetInfo() []*TestCaseInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type TestCaseInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"` // Test case name
	Error      string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Duration   uint64 `protobuf:"varint,3,opt,name=duration,proto3" json:"duration,omitempty"` // Number of whole microseconds in the duration.
	LogMessage string `protobuf:"bytes,4,opt,name=log_message,json=logMessage,proto3" json:"log_message,omitempty"`
}

func (x *TestCaseInfo) Reset() {
	*x = TestCaseInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gpyrpc_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestCaseInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestCaseInfo) ProtoMessage() {}

func (x *TestCaseInfo) ProtoReflect() protoreflect.Message {
	mi := &file_gpyrpc_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestCaseInfo.ProtoReflect.Descriptor instead.
func (*TestCaseInfo) Descriptor() ([]byte, []int) {
	return file_gpyrpc_proto_rawDescGZIP(), []int{58}
}

func (x *TestCaseInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TestCaseInfo) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *TestCaseInfo) GetDuration() uint64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *TestCaseInfo) GetLogMessage() string {
	if x != nil {
		return x.LogMessage
	}
	return ""
}

type UpdateDependencies_Args struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ManifestPath string `protobuf:"bytes,1,opt,name=manifest_path,json=manifestPath,proto3" json:"manifest_path,omitempty"`
	Vendor       bool   `protobuf:"varint,2,opt,name=vendor,proto3" json:"vendor,omitempty"`
}

func (x *UpdateDependencies_Args) Reset() {
	*x = UpdateDependencies_Args{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gpyrpc_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDependencies_Args) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDependencies_Args) ProtoMessage() {}

func (x *UpdateDependencies_Args) ProtoReflect() protoreflect.Message {
	mi := &file_gpyrpc_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDependencies_Args.ProtoReflect.Descriptor instead.
func (*UpdateDependencies_Args) Descriptor() ([]byte, []int) {
	return file_gpyrpc_proto_rawDescGZIP(), []int{59}
}

func (x *UpdateDependencies_Args) GetManifestPath() string {
	if x != nil {
		return x.ManifestPath
	}
	return ""
}

func (x *UpdateDependencies_Args) GetVendor() bool {
	if x != nil {
		return x.Vendor
	}
	return false
}

type UpdateDependencies_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExternalPkgs []*ExternalPkg `protobuf:"bytes,3,rep,name=external_pkgs,json=externalPkgs,proto3" json:"external_pkgs,omitempty"`
}

func (x *UpdateDependencies_Result) Reset() {
	*x = UpdateDependencies_Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gpyrpc_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDependencies_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDependencies_Result) ProtoMessage() {}

func (x *UpdateDependencies_Result) ProtoReflect() protoreflect.Message {
	mi := &file_gpyrpc_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDependencies_Result.ProtoReflect.Descriptor instead.
func (*UpdateDependencies_Result) Descriptor() ([]byte, []int) {
	return file_gpyrpc_proto_rawDescGZIP(), []int{60}
}

func (x *UpdateDependencies_Result) GetExternalPkgs() []*ExternalPkg {
	if x != nil {
		return x.ExternalPkgs
	}
	return nil
}

type KclType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type        string              `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`                                                                                                     // schema, dict, list, str, int, float, bool, any, union, number_multiplier
	UnionTypes  []*KclType          `protobuf:"bytes,2,rep,name=union_types,json=unionTypes,proto3" json:"union_types,omitempty"`                                                                       // union types
	Default     string              `protobuf:"bytes,3,opt,name=default,proto3" json:"default,omitempty"`                                                                                               // default value
	SchemaName  string              `protobuf:"bytes,4,opt,name=schema_name,json=schemaName,proto3" json:"schema_name,omitempty"`                                                                       // schema name
	SchemaDoc   string              `protobuf:"bytes,5,opt,name=schema_doc,json=schemaDoc,proto3" json:"schema_doc,omitempty"`                                                                          // schema doc
	Properties  map[string]*KclType `protobuf:"bytes,6,rep,name=properties,proto3" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // schema properties
	Required    []string            `protobuf:"bytes,7,rep,name=required,proto3" json:"required,omitempty"`                                                                                             // required schema properties, [property_name1, property_name2]
	Key         *KclType            `protobuf:"bytes,8,opt,name=key,proto3" json:"key,omitempty"`                                                                                                       // dict key type
	Item        *KclType            `protobuf:"bytes,9,opt,name=item,proto3" json:"item,omitempty"`                                                                                                     // dict/list item type
	Line        int32               `protobuf:"varint,10,opt,name=line,proto3" json:"line,omitempty"`
	Decorators  []*Decorator        `protobuf:"bytes,11,rep,name=decorators,proto3" json:"decorators,omitempty"`                                                                                     // schema decorators
	Filename    string              `protobuf:"bytes,12,opt,name=filename,proto3" json:"filename,omitempty"`                                                                                         // `filename` represents the absolute path of the file name where the attribute is located.
	PkgPath     string              `protobuf:"bytes,13,opt,name=pkg_path,json=pkgPath,proto3" json:"pkg_path,omitempty"`                                                                            // `pkg_path` represents the path name of the package where the attribute is located.
	Description string              `protobuf:"bytes,14,opt,name=description,proto3" json:"description,omitempty"`                                                                                   // `description` represents the document of the attribute.
	Examples    map[string]*Example `protobuf:"bytes,15,rep,name=examples,proto3" json:"examples,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // A map object to hold examples, the key is the example name.
	BaseSchema  *KclType            `protobuf:"bytes,16,opt,name=base_schema,json=baseSchema,proto3" json:"base_schema,omitempty"`
}

func (x *KclType) Reset() {
	*x = KclType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gpyrpc_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KclType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KclType) ProtoMessage() {}

func (x *KclType) ProtoReflect() protoreflect.Message {
	mi := &file_gpyrpc_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KclType.ProtoReflect.Descriptor instead.
func (*KclType) Descriptor() ([]byte, []int) {
	return file_gpyrpc_proto_rawDescGZIP(), []int{61}
}

func (x *KclType) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *KclType) GetUnionTypes() []*KclType {
	if x != nil {
		return x.UnionTypes
	}
	return nil
}

func (x *KclType) GetDefault() string {
	if x != nil {
		return x.Default
	}
	return ""
}

func (x *KclType) GetSchemaName() string {
	if x != nil {
		return x.SchemaName
	}
	return ""
}

func (x *KclType) GetSchemaDoc() string {
	if x != nil {
		return x.SchemaDoc
	}
	return ""
}

func (x *KclType) GetProperties() map[string]*KclType {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *KclType) GetRequired() []string {
	if x != nil {
		return x.Required
	}
	return nil
}

func (x *KclType) GetKey() *KclType {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *KclType) GetItem() *KclType {
	if x != nil {
		return x.Item
	}
	return nil
}

func (x *KclType) GetLine() int32 {
	if x != nil {
		return x.Line
	}
	return 0
}

func (x *KclType) GetDecorators() []*Decorator {
	if x != nil {
		return x.Decorators
	}
	return nil
}

func (x *KclType) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *KclType) GetPkgPath() string {
	if x != nil {
		return x.PkgPath
	}
	return ""
}

func (x *KclType) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *KclType) GetExamples() map[string]*Example {
	if x != nil {
		return x.Examples
	}
	return nil
}

func (x *KclType) GetBaseSchema() *KclType {
	if x != nil {
		return x.BaseSchema
	}
	return nil
}

type Decorator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Arguments []string          `protobuf:"bytes,2,rep,name=arguments,proto3" json:"arguments,omitempty"`
	Keywords  map[string]string `protobuf:"bytes,3,rep,name=keywords,proto3" json:"keywords,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Decorator) Reset() {
	*x = Decorator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gpyrpc_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Decorator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Decorator) ProtoMessage() {}

func (x *Decorator) ProtoReflect() protoreflect.Message {
	mi := &file_gpyrpc_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Decorator.ProtoReflect.Descriptor instead.
func (*Decorator) Descriptor() ([]byte, []int) {
	return file_gpyrpc_proto_rawDescGZIP(), []int{62}
}

func (x *Decorator) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Decorator) GetArguments() []string {
	if x != nil {
		return x.Arguments
	}
	return nil
}

func (x *Decorator) GetKeywords() map[string]string {
	if x != nil {
		return x.Keywords
	}
	return nil
}

type Example struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Summary     string `protobuf:"bytes,1,opt,name=summary,proto3" json:"summary,omitempty"`         // Short description for the example.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"` // Long description for the example.
	Value       string `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`             // Embedded literal example.
}

func (x *Example) Reset() {
	*x = Example{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gpyrpc_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Example) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Example) ProtoMessage() {}

func (x *Example) ProtoReflect() protoreflect.Message {
	mi := &file_gpyrpc_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Example.ProtoReflect.Descriptor instead.
func (*Example) Descriptor() ([]byte, []int) {
	return file_gpyrpc_proto_rawDescGZIP(), []int{63}
}

func (x *Example) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *Example) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Example) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

var File_gpyrpc_proto protoreflect.FileDescriptor

var file_gpyrpc_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x67, 0x70, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x67, 0x70, 0x79, 0x72, 0x70, 0x63, 0x22, 0x43, 0x0a, 0x0b, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x50, 0x6b, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6b, 0x67, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x6b, 0x67, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x70, 0x6b, 0x67, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x70, 0x6b, 0x67, 0x50, 0x61, 0x74, 0x68, 0x22, 0x34, 0x0a, 0x08, 0x41,
	0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x5e, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x2b, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x67, 0x70, 0x79, 0x72, 0x70, 0x63, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x22, 0x3f, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x6d, 0x73, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x22,
	0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x67, 0x70,
	0x79, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x70,
	0x6f, 0x73, 0x22, 0x21, 0x0a, 0x09, 0x50, 0x69, 0x6e, 0x67, 0x5f, 0x41, 0x72, 0x67, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x23, 0x0a, 0x0b, 0x50, 0x69, 0x6e, 0x67, 0x5f, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x11, 0x0a, 0x0f, 0x4c, 0x69,
	0x73, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x41, 0x72, 0x67, 0x73, 0x22, 0x3d, 0x0a,
	0x11, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x76, 0x0a, 0x0e,
	0x50, 0x61, 0x72, 0x73, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x41, 0x72, 0x67, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x0d, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x6b, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x67, 0x70, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x50, 0x6b, 0x67, 0x52, 0x0c, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x50, 0x6b, 0x67, 0x73, 0x22, 0x68, 0x0a, 0x10, 0x50, 0x61, 0x72, 0x73, 0x65, 0x46, 0x69, 0x6c,
	0x65, 0x5f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x73, 0x74, 0x5f,
	0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x73, 0x74, 0x4a,
	0x73, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x04, 0x64, 0x65, 0x70, 0x73, 0x12, 0x25, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x67, 0x70, 0x79, 0x72, 0x70, 0x63,
	0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0x7d,
	0x0a, 0x11, 0x50, 0x61, 0x72, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x41,
	0x72, 0x67, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x74, 0x68, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x0d, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f,
	0x70, 0x6b, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x67, 0x70, 0x79,
	0x72, 0x70, 0x63, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x50, 0x6b, 0x67, 0x52,
	0x0c, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x50, 0x6b, 0x67, 0x73, 0x22, 0x6d, 0x0a,
	0x13, 0x50, 0x61, 0x72, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x73, 0x74, 0x5f, 0x6a, 0x73, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x73, 0x74, 0x4a, 0x73, 0x6f, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05,
	0x70, 0x61, 0x74, 0x68, 0x73, 0x12, 0x25, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x67, 0x70, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0xb6, 0x01, 0x0a,
	0x10, 0x4c, 0x6f, 0x61, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x41, 0x72, 0x67,
	0x73, 0x12, 0x38, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x73, 0x65, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x70, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x50,
	0x61, 0x72, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x41, 0x72, 0x67, 0x73,
	0x52, 0x09, 0x70, 0x61, 0x72, 0x73, 0x65, 0x41, 0x72, 0x67, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x72,
	0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x5f, 0x61, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x41, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c,
	0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x12,
	0x24, 0x0a, 0x0e, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x61, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x77, 0x69, 0x74, 0x68, 0x41, 0x73, 0x74,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xfa, 0x08, 0x0a, 0x12, 0x4c, 0x6f, 0x61, 0x64, 0x50, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70,
	0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x74, 0x68, 0x73, 0x12, 0x30, 0x0a, 0x0c,
	0x70, 0x61, 0x72, 0x73, 0x65, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x67, 0x70, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x2e,
	0x0a, 0x0b, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x67, 0x70, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x52, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x3e,
	0x0a, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x67, 0x70, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x50, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x12, 0x41,
	0x0a, 0x07, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x67, 0x70, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x50, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x53, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x73, 0x12, 0x55, 0x0a, 0x0f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x5f, 0x6d, 0x61, 0x70, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x70, 0x79,
	0x72, 0x70, 0x63, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x53,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x4d, 0x61, 0x70, 0x12, 0x55, 0x0a, 0x0f, 0x73, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x70, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x50,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x53, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0d, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x61, 0x70, 0x12,
	0x6e, 0x0a, 0x18, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x35, 0x2e, 0x67, 0x70, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x50,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x46, 0x75,
	0x6c, 0x6c, 0x79, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65,
	0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x15, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x51,
	0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x4d, 0x61, 0x70, 0x12,
	0x4f, 0x0a, 0x0d, 0x70, 0x6b, 0x67, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f, 0x6d, 0x61, 0x70,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x70, 0x79, 0x72, 0x70, 0x63, 0x2e,
	0x4c, 0x6f, 0x61, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x2e, 0x50, 0x6b, 0x67, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0b, 0x70, 0x6b, 0x67, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x4d, 0x61, 0x70,
	0x1a, 0x48, 0x0a, 0x0b, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x23, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x67, 0x70, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4a, 0x0a, 0x0c, 0x53, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x67, 0x70,
	0x79, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x55, 0x0a, 0x12, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x29,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x67, 0x70, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x40, 0x0a,
	0x12, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x5d, 0x0a, 0x1a, 0x46, 0x75, 0x6c, 0x6c, 0x79, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x4e, 0x61, 0x6d, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x29, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x67, 0x70, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x52,
	0x0a, 0x10, 0x50, 0x6b, 0x67, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x70, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x63, 0x6f,
	0x70, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x42, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x5f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2c, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x70, 0x79, 0x72,
	0x70, 0x63, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x65, 0x6c, 0x70, 0x52, 0x07, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x89, 0x01, 0x0a, 0x0a, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x65, 0x6c, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x68, 0x65, 0x6c, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x65,
	0x6c, 0x70, 0x22, 0xd7, 0x01, 0x0a, 0x06, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x1f, 0x0a,
	0x02, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x67, 0x70, 0x79, 0x72,
	0x70, 0x63, 0x2e, 0x4b, 0x63, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x02, 0x74, 0x79, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x67, 0x70, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x25, 0x0a,
	0x03, 0x64, 0x65, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x67, 0x70, 0x79,
	0x72, 0x70, 0x63, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52,
	0x03, 0x64, 0x65, 0x66, 0x12, 0x29, 0x0a, 0x05, 0x61, 0x74, 0x74, 0x72, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x67, 0x70, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x05, 0x61, 0x74, 0x74, 0x72, 0x73, 0x12,
	0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x22, 0xcb, 0x01, 0x0a,
	0x05, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x2a, 0x0a, 0x06, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x70, 0x79,
	0x72, 0x70, 0x63, 0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x06,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x67, 0x70, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x53,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x12, 0x2e, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x70, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x63, 0x6f,
	0x70, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65,
	0x6e, 0x12, 0x27, 0x0a, 0x04, 0x64, 0x65, 0x66, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x67, 0x70, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x52, 0x04, 0x64, 0x65, 0x66, 0x73, 0x22, 0x3d, 0x0a, 0x0b, 0x53, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x69, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x01, 0x69, 0x12, 0x0c, 0x0a, 0x01, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x01, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x22, 0x3c, 0x0a, 0x0a, 0x53, 0x63, 0x6f,
	0x70, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x69, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x01, 0x69, 0x12, 0x0c, 0x0a, 0x01, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x01, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x22, 0xae, 0x05, 0x0a, 0x10, 0x45, 0x78, 0x65, 0x63,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x41, 0x72, 0x67, 0x73, 0x12, 0x19, 0x0a, 0x08,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x77, 0x6f, 0x72, 0x6b, 0x44, 0x69, 0x72, 0x12, 0x26, 0x0a, 0x0f, 0x6b, 0x5f, 0x66, 0x69, 0x6c,
	0x65, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0d, 0x6b, 0x46, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x1e, 0x0a, 0x0b, 0x6b, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x24, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x67, 0x70, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x04, 0x61, 0x72, 0x67, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64,
	0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69,
	0x64, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x79,
	0x61, 0x6d, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x11, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x59, 0x61, 0x6d, 0x6c, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x5f, 0x6f, 0x76, 0x65,
	0x72, 0x72, 0x69, 0x64, 0x65, 0x5f, 0x61, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x10, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x41, 0x73,
	0x74, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x5f, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x73,
	0x74, 0x72, 0x69, 0x63, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12,
	0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x6f, 0x6e, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x6f,
	0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x64, 0x65, 0x62,
	0x75, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x6f, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x12,
	0x38, 0x0a, 0x0d, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x6b, 0x67, 0x73,
	0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x67, 0x70, 0x79, 0x72, 0x70, 0x63, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x50, 0x6b, 0x67, 0x52, 0x0c, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x50, 0x6b, 0x67, 0x73, 0x12, 0x37, 0x0a, 0x18, 0x69, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x69, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x54, 0x79, 0x70, 0x65, 0x50, 0x61,
	0x74, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x5f, 0x6f, 0x6e,
	0x6c, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c,
	0x65, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x68, 0x69,
	0x64, 0x64, 0x65, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x68, 0x6f, 0x77,
	0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x11, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x70,
	0x61, 0x74, 0x68, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x66,
	0x61, 0x73, 0x74, 0x5f, 0x65, 0x76, 0x61, 0x6c, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x66, 0x61, 0x73, 0x74, 0x45, 0x76, 0x61, 0x6c, 0x22, 0x98, 0x01, 0x0a, 0x12, 0x45, 0x78, 0x65,
	0x63, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6a, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x79, 0x61, 0x6d, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x79, 0x61, 0x6d, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f, 0x67, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x72, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x72, 0x72, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x62, 0x0a, 0x11, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x61, 0x6d, 0x5f, 0x41, 0x72, 0x67, 0x73, 0x12, 0x35, 0x0a, 0x09, 0x65, 0x78, 0x65, 0x63,
	0x5f, 0x61, 0x72, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x70,
	0x79, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d,
	0x5f, 0x41, 0x72, 0x67, 0x73, 0x52, 0x08, 0x65, 0x78, 0x65, 0x63, 0x41, 0x72, 0x67, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x29, 0x0a, 0x13, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x22, 0x5e, 0x0a, 0x11, 0x45, 0x78, 0x65, 0x63, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61,
	0x63, 0x74, 0x5f, 0x41, 0x72, 0x67, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x35, 0x0a, 0x09, 0x65,
	0x78, 0x65, 0x63, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x67, 0x70, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x61, 0x6d, 0x5f, 0x41, 0x72, 0x67, 0x73, 0x52, 0x08, 0x65, 0x78, 0x65, 0x63, 0x41, 0x72,
	0x67, 0x73, 0x22, 0x33, 0x0a, 0x10, 0x52, 0x65, 0x73, 0x65, 0x74, 0x50, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x5f, 0x41, 0x72, 0x67, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x52, 0x6f, 0x6f, 0x74, 0x22, 0x14, 0x0a, 0x12, 0x52, 0x65, 0x73, 0x65, 0x74,
	0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x29, 0x0a,
	0x0f, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x41, 0x72, 0x67, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x31, 0x0a, 0x11, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x09, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x64, 0x22, 0x25, 0x0a, 0x0f, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x50, 0x61, 0x74, 0x68, 0x5f, 0x41, 0x72, 0x67, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x22, 0x38, 0x0a, 0x11, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x50, 0x61, 0x74, 0x68,
	0x5f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x50, 0x61, 0x74, 0x68, 0x73, 0x22, 0x25, 0x0a, 0x0d,
	0x4c, 0x69, 0x6e, 0x74, 0x50, 0x61, 0x74, 0x68, 0x5f, 0x41, 0x72, 0x67, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61,
	0x74, 0x68, 0x73, 0x22, 0x2b, 0x0a, 0x0f, 0x4c, 0x69, 0x6e, 0x74, 0x50, 0x61, 0x74, 0x68, 0x5f,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x22, 0x60, 0x0a, 0x11, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x46, 0x69, 0x6c, 0x65,
	0x5f, 0x41, 0x72, 0x67, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x70, 0x65,
	0x63, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x73, 0x70, 0x65, 0x63, 0x73, 0x12,
	0x21, 0x0a, 0x0c, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x61, 0x74,
	0x68, 0x73, 0x22, 0x5f, 0x0a, 0x13, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x46, 0x69,
	0x6c, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x30, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x73, 0x65, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x67, 0x70, 0x79, 0x72, 0x70, 0x63,
	0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x73, 0x65, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x22, 0x3c, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x5f, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x23, 0x0a, 0x0d,
	0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0c, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x22, 0x3e, 0x0a, 0x0c, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x2e, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x67, 0x70, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x22, 0x79, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x5f, 0x41, 0x72, 0x67, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x70, 0x65, 0x63, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x73, 0x70,
	0x65, 0x63, 0x73, 0x12, 0x37, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x70, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x5f, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x94, 0x02, 0x0a,
	0x14, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x5f, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x49, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x70, 0x79, 0x72, 0x70,
	0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x5f,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x12, 0x2b, 0x0a, 0x11, 0x75, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x75, 0x6e, 0x73,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x30, 0x0a,
	0x0c, 0x70, 0x61, 0x72, 0x73, 0x65, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x67, 0x70, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x1a,
	0x52, 0x0a, 0x0e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x70, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xba, 0x01, 0x0a, 0x08, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x70, 0x5f, 0x73, 0x79, 0x6d, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x70, 0x53, 0x79, 0x6d, 0x12, 0x2f, 0x0a, 0x0a, 0x6c, 0x69,
	0x73, 0x74, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x67, 0x70, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x33, 0x0a, 0x0c, 0x64,
	0x69, 0x63, 0x74, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x67, 0x70, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x61, 0x70, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0b, 0x64, 0x69, 0x63, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73,
	0x22, 0x44, 0x0a, 0x08, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x26,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x67, 0x70, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x73, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x41,
	0x72, 0x67, 0x73, 0x12, 0x35, 0x0a, 0x09, 0x65, 0x78, 0x65, 0x63, 0x5f, 0x61, 0x72, 0x67, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x70, 0x79, 0x72, 0x70, 0x63, 0x2e,
	0x45, 0x78, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x41, 0x72, 0x67, 0x73,
	0x52, 0x08, 0x65, 0x78, 0x65, 0x63, 0x41, 0x72, 0x67, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xe0, 0x01, 0x0a, 0x1b,
	0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x5f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x6a, 0x0a, 0x13, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x67, 0x70, 0x79, 0x72, 0x70,
	0x63, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x54, 0x79, 0x70, 0x65, 0x4d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x54, 0x79, 0x70, 0x65,
	0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x1a, 0x55, 0x0a, 0x16, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x25, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x67, 0x70, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x4b, 0x63, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc2,
	0x01, 0x0a, 0x11, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x5f,
	0x41, 0x72, 0x67, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x66, 0x69, 0x6c, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x66, 0x69, 0x6c, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x22, 0x50, 0x0a, 0x13, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x72, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x72, 0x72, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x52, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x1a, 0x0a,
	0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x99, 0x01, 0x0a, 0x11, 0x4c, 0x69,
	0x73, 0x74, 0x44, 0x65, 0x70, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x5f, 0x41, 0x72, 0x67, 0x73, 0x12,
	0x19, 0x0a, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x69, 0x72, 0x12, 0x20, 0x0a, 0x0c, 0x75, 0x73,
	0x65, 0x5f, 0x61, 0x62, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x75, 0x73, 0x65, 0x41, 0x62, 0x73, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1f, 0x0a, 0x0b,
	0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x41, 0x6c, 0x6c, 0x12, 0x26, 0x0a,
	0x0f, 0x75, 0x73, 0x65, 0x5f, 0x66, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x46, 0x61, 0x73, 0x74, 0x50,
	0x61, 0x72, 0x73, 0x65, 0x72, 0x22, 0x5f, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x70,
	0x46, 0x69, 0x6c, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x70, 0x6b, 0x67, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70,
	0x6b, 0x67, 0x72, 0x6f, 0x6f, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x6b, 0x67, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x6b, 0x67, 0x70, 0x61, 0x74, 0x68,
	0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x22, 0x49, 0x0a, 0x16, 0x4c, 0x6f, 0x61, 0x64, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x5f, 0x41, 0x72, 0x67, 0x73,
	0x12, 0x19, 0x0a, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x69, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x6c, 0x65,
	0x73, 0x22, 0x8c, 0x01, 0x0a, 0x18, 0x4c, 0x6f, 0x61, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x39,
	0x0a, 0x0f, 0x6b, 0x63, 0x6c, 0x5f, 0x63, 0x6c, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x70, 0x79, 0x72, 0x70, 0x63,
	0x2e, 0x43, 0x6c, 0x69, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0d, 0x6b, 0x63, 0x6c, 0x43,
	0x6c, 0x69, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x35, 0x0a, 0x0b, 0x6b, 0x63, 0x6c,
	0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x67, 0x70, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x50, 0x61, 0x69, 0x72, 0x52, 0x0a, 0x6b, 0x63, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0x91, 0x03, 0x0a, 0x09, 0x43, 0x6c, 0x69, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x14,
	0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x09, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x61,
	0x74, 0x68, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0c, 0x70, 0x61, 0x74, 0x68, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x2c, 0x0a, 0x12, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x73, 0x74, 0x72,
	0x69, 0x63, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x21, 0x0a,
	0x0c, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x6f, 0x6e, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x6f, 0x6e, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65,
	0x62, 0x75, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67,
	0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x6f, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x73, 0x68, 0x6f, 0x77, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x12, 0x37,
	0x0a, 0x18, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x15, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x54,
	0x79, 0x70, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x61, 0x73, 0x74, 0x5f,
	0x65, 0x76, 0x61, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x66, 0x61, 0x73, 0x74,
	0x45, 0x76, 0x61, 0x6c, 0x22, 0x36, 0x0a, 0x0c, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x50, 0x61, 0x69, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x8b, 0x01, 0x0a,
	0x0b, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x41, 0x72, 0x67, 0x73, 0x12, 0x21, 0x0a, 0x0c,
	0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12,
	0x19, 0x0a, 0x08, 0x6e, 0x65, 0x77, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6e, 0x65, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x34, 0x0a, 0x0d, 0x52, 0x65,
	0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73,
	0x22, 0xfd, 0x01, 0x0a, 0x0f, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x5f,
	0x41, 0x72, 0x67, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f,
	0x72, 0x6f, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x12, 0x4b, 0x0a, 0x0c, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x67, 0x70, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x5f, 0x41, 0x72, 0x67, 0x73, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x65, 0x77, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x77, 0x4e, 0x61, 0x6d, 0x65,
	0x1a, 0x3e, 0x0a, 0x10, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xa6, 0x01, 0x0a, 0x11, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x5f,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x50, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x67, 0x70, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x5f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64,
	0x43, 0x6f, 0x64, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x1a, 0x3f, 0x0a, 0x11, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x99, 0x01, 0x0a, 0x09, 0x54, 0x65,
	0x73, 0x74, 0x5f, 0x41, 0x72, 0x67, 0x73, 0x12, 0x35, 0x0a, 0x09, 0x65, 0x78, 0x65, 0x63, 0x5f,
	0x61, 0x72, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x70, 0x79,
	0x72, 0x70, 0x63, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f,
	0x41, 0x72, 0x67, 0x73, 0x52, 0x08, 0x65, 0x78, 0x65, 0x63, 0x41, 0x72, 0x67, 0x73, 0x12, 0x19,
	0x0a, 0x08, 0x70, 0x6b, 0x67, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x07, 0x70, 0x6b, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x75, 0x6e,
	0x5f, 0x72, 0x65, 0x67, 0x65, 0x78, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72,
	0x75, 0x6e, 0x52, 0x65, 0x67, 0x65, 0x78, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x61, 0x69, 0x6c,
	0x5f, 0x66, 0x61, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x66, 0x61, 0x69,
	0x6c, 0x46, 0x61, 0x73, 0x74, 0x22, 0x37, 0x0a, 0x0b, 0x54, 0x65, 0x73, 0x74, 0x5f, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x28, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x70, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x65, 0x73, 0x74,
	0x43, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x75,
	0x0a, 0x0c, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f, 0x67, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x6f, 0x67, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x56, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44,
	0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x5f, 0x41, 0x72, 0x67, 0x73,
	0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73,
	0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x22, 0x55, 0x0a,
	0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63,
	0x69, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x38, 0x0a, 0x0d, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x6b, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x67, 0x70, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x50, 0x6b, 0x67, 0x52, 0x0c, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x50, 0x6b, 0x67, 0x73, 0x22, 0xf9, 0x05, 0x0a, 0x07, 0x4b, 0x63, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x0b, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x67, 0x70, 0x79, 0x72,
	0x70, 0x63, 0x2e, 0x4b, 0x63, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x75, 0x6e, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x64, 0x6f, 0x63, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x44, 0x6f, 0x63,
	0x12, 0x3f, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x70, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x4b, 0x63,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x21, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x67, 0x70, 0x79,
	0x72, 0x70, 0x63, 0x2e, 0x4b, 0x63, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x23, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x67, 0x70, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x4b, 0x63, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x69, 0x74, 0x65, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x31, 0x0a, 0x0a, 0x64, 0x65, 0x63,
	0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x67, 0x70, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x52, 0x0a, 0x64, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6b, 0x67, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x6b, 0x67, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x08, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x70, 0x79, 0x72, 0x70, 0x63,
	0x2e, 0x4b, 0x63, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73,
	0x12, 0x30, 0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x67, 0x70, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x4b,
	0x63, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x1a, 0x4e, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x25, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x67, 0x70, 0x79, 0x72, 0x70, 0x63, 0x2e,
	0x4b, 0x63, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x4c, 0x0a, 0x0d, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x25, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x67, 0x70, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x78,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xb7, 0x01, 0x0a, 0x09, 0x44, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x3b, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x70, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x63, 0x6f,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x1a, 0x3b, 0x0a,
	0x0d, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x5b, 0x0a, 0x07, 0x45, 0x78,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x32, 0x82, 0x01, 0x0a, 0x0e, 0x42, 0x75, 0x69, 0x6c,
	0x74, 0x69, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x50, 0x69,
	0x6e, 0x67, 0x12, 0x11, 0x2e, 0x67, 0x70, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x69, 0x6e, 0x67,
	0x5f, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x13, 0x2e, 0x67, 0x70, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x50,
	0x69, 0x6e, 0x67, 0x5f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x40, 0x0a, 0x0a, 0x4c, 0x69,
	0x73, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x17, 0x2e, 0x67, 0x70, 0x79, 0x72, 0x70,
	0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x41, 0x72, 0x67,
	0x73, 0x1a, 0x19, 0x2e, 0x67, 0x70, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0xc0, 0x0b, 0x0a,
	0x0c, 0x4b, 0x63, 0x6c, 0x76, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2e, 0x0a,
	0x04, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x11, 0x2e, 0x67, 0x70, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x50,
	0x69, 0x6e, 0x67, 0x5f, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x13, 0x2e, 0x67, 0x70, 0x79, 0x72, 0x70,
	0x63, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x5f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x43, 0x0a,
	0x0b, 0x45, 0x78, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x18, 0x2e, 0x67,
	0x70, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x5f, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x1a, 0x2e, 0x67, 0x70, 0x79, 0x72, 0x70, 0x63, 0x2e,
	0x45, 0x78, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x46, 0x0a, 0x0c, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x12, 0x19, 0x2e, 0x67, 0x70, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x1b, 0x2e,
	0x67, 0x70, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x61, 0x6d, 0x5f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x45, 0x0a, 0x0c, 0x45, 0x78,
	0x65, 0x63, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x12, 0x19, 0x2e, 0x67, 0x70, 0x79,
	0x72, 0x70, 0x63, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74,
	0x5f, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x1a, 0x2e, 0x67, 0x70, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x45,
	0x78, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x3d, 0x0a, 0x09, 0x50, 0x61, 0x72, 0x73, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x16,
	0x2e, 0x67, 0x70, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x72, 0x73, 0x65, 0x46, 0x69, 0x6c,
	0x65, 0x5f, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x18, 0x2e, 0x67, 0x70, 0x79, 0x72, 0x70, 0x63, 0x2e,
	0x50, 0x61, 0x72, 0x73, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x46, 0x0a, 0x0c, 0x50, 0x61, 0x72, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d,
	0x12, 0x19, 0x2e, 0x67, 0x70, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x72, 0x73, 0x65, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x1b, 0x2e, 0x67, 0x70,
	0x79, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x72, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x5f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x43, 0x0a, 0x0b, 0x4c, 0x6f, 0x61, 0x64,
	0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x18, 0x2e, 0x67, 0x70, 0x79, 0x72, 0x70, 0x63,
	0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x41, 0x72, 0x67,
	0x73, 0x1a, 0x1a, 0x2e, 0x67, 0x70, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x50,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x44, 0x0a,
	0x0b, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x19, 0x2e, 0x67,
	0x70, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x72, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x5f, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x1a, 0x2e, 0x67, 0x70, 0x79, 0x72, 0x70, 0x63,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x49, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x12, 0x1a, 0x2e, 0x67, 0x70, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x5f, 0x41, 0x72, 0x67, 0x73,
	0x1a, 0x1c, 0x2e, 0x67, 0x70, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x40,
	0x0a, 0x0a, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x2e, 0x67,
	0x70, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x5f, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x19, 0x2e, 0x67, 0x70, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x40, 0x0a, 0x0a, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x17,
	0x2e, 0x67, 0x70, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x50, 0x61,
	0x74, 0x68, 0x5f, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x19, 0x2e, 0x67, 0x70, 0x79, 0x72, 0x70, 0x63,
	0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x50, 0x61, 0x74, 0x68, 0x5f, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x3a, 0x0a, 0x08, 0x4c, 0x69, 0x6e, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x15,
	0x2e, 0x67, 0x70, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x6e, 0x74, 0x50, 0x61, 0x74, 0x68,
	0x5f, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x17, 0x2e, 0x67, 0x70, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x4c,
	0x69, 0x6e, 0x74, 0x50, 0x61, 0x74, 0x68, 0x5f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x46,
	0x0a, 0x0c, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x19,
	0x2e, 0x67, 0x70, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65,
	0x46, 0x69, 0x6c, 0x65, 0x5f, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x1b, 0x2e, 0x67, 0x70, 0x79, 0x72,
	0x70, 0x63, 0x2e, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x5f,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x5e, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x21,
	0x2e, 0x67, 0x70, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x41, 0x72, 0x67,
	0x73, 0x1a, 0x23, 0x2e, 0x67, 0x70, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x46, 0x0a, 0x0c, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x2e, 0x67, 0x70, 0x79, 0x72, 0x70, 0x63, 0x2e,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x41, 0x72, 0x67,
	0x73, 0x1a, 0x1b, 0x2e, 0x67, 0x70, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x46,
	0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x70, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x19,
	0x2e, 0x67, 0x70, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x70, 0x46,
	0x69, 0x6c, 0x65, 0x73, 0x5f, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x1b, 0x2e, 0x67, 0x70, 0x79, 0x72,
	0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x70, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x5f,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x55, 0x0a, 0x11, 0x4c, 0x6f, 0x61, 0x64, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x1e, 0x2e, 0x67, 0x70,
	0x79, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x5f, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x20, 0x2e, 0x67, 0x70,
	0x79, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x34, 0x0a,
	0x06, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x13, 0x2e, 0x67, 0x70, 0x79, 0x72, 0x70, 0x63,
	0x2e, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x15, 0x2e, 0x67,
	0x70, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x40, 0x0a, 0x0a, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x17, 0x2e, 0x67, 0x70, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x6e, 0x61, 0x6d,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x19, 0x2e, 0x67, 0x70, 0x79,
	0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x54, 0x65, 0x73, 0x74, 0x12, 0x11, 0x2e,
	0x67, 0x70, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x5f, 0x41, 0x72, 0x67, 0x73,
	0x1a, 0x13, 0x2e, 0x67, 0x70, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x5f, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x58, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44,
	0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x1f, 0x2e, 0x67, 0x70,
	0x79, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x70, 0x65, 0x6e,
	0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x5f, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x21, 0x2e, 0x67,
	0x70, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x70, 0x65,
	0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42,
	0x2b, 0x5a, 0x29, 0x6b, 0x63, 0x6c, 0x2d, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x69, 0x6f, 0x2f, 0x6b,
	0x63, 0x6c, 0x2d, 0x67, 0x6f, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x73, 0x70, 0x65, 0x63, 0x2f, 0x67,
	0x70, 0x79, 0x72, 0x70, 0x63, 0x3b, 0x67, 0x70, 0x79, 0x72, 0x70, 0x63, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_gpyrpc_proto_rawDescOnce sync.Once
	file_gpyrpc_proto_rawDescData = file_gpyrpc_proto_rawDesc
)

func file_gpyrpc_proto_rawDescGZIP() []byte {
	file_gpyrpc_proto_rawDescOnce.Do(func() {
		file_gpyrpc_proto_rawDescData = protoimpl.X.CompressGZIP(file_gpyrpc_proto_rawDescData)
	})
	return file_gpyrpc_proto_rawDescData
}

var file_gpyrpc_proto_msgTypes = make([]protoimpl.MessageInfo, 77)
var file_gpyrpc_proto_goTypes = []any{
	(*ExternalPkg)(nil),                 // 0: gpyrpc.ExternalPkg
	(*Argument)(nil),                    // 1: gpyrpc.Argument
	(*Error)(nil),                       // 2: gpyrpc.Error
	(*Message)(nil),                     // 3: gpyrpc.Message
	(*Ping_Args)(nil),                   // 4: gpyrpc.Ping_Args
	(*Ping_Result)(nil),                 // 5: gpyrpc.Ping_Result
	(*ListMethod_Args)(nil),             // 6: gpyrpc.ListMethod_Args
	(*ListMethod_Result)(nil),           // 7: gpyrpc.ListMethod_Result
	(*ParseFile_Args)(nil),              // 8: gpyrpc.ParseFile_Args
	(*ParseFile_Result)(nil),            // 9: gpyrpc.ParseFile_Result
	(*ParseProgram_Args)(nil),           // 10: gpyrpc.ParseProgram_Args
	(*ParseProgram_Result)(nil),         // 11: gpyrpc.ParseProgram_Result
	(*LoadPackage_Args)(nil),            // 12: gpyrpc.LoadPackage_Args
	(*LoadPackage_Result)(nil),          // 13: gpyrpc.LoadPackage_Result
	(*ListOptions_Result)(nil),          // 14: gpyrpc.ListOptions_Result
	(*OptionHelp)(nil),                  // 15: gpyrpc.OptionHelp
	(*Symbol)(nil),                      // 16: gpyrpc.Symbol
	(*Scope)(nil),                       // 17: gpyrpc.Scope
	(*SymbolIndex)(nil),                 // 18: gpyrpc.SymbolIndex
	(*ScopeIndex)(nil),                  // 19: gpyrpc.ScopeIndex
	(*ExecProgram_Args)(nil),            // 20: gpyrpc.ExecProgram_Args
	(*ExecProgram_Result)(nil),          // 21: gpyrpc.ExecProgram_Result
	(*BuildProgram_Args)(nil),           // 22: gpyrpc.BuildProgram_Args
	(*BuildProgram_Result)(nil),         // 23: gpyrpc.BuildProgram_Result
	(*ExecArtifact_Args)(nil),           // 24: gpyrpc.ExecArtifact_Args
	(*ResetPlugin_Args)(nil),            // 25: gpyrpc.ResetPlugin_Args
	(*ResetPlugin_Result)(nil),          // 26: gpyrpc.ResetPlugin_Result
	(*FormatCode_Args)(nil),             // 27: gpyrpc.FormatCode_Args
	(*FormatCode_Result)(nil),           // 28: gpyrpc.FormatCode_Result
	(*FormatPath_Args)(nil),             // 29: gpyrpc.FormatPath_Args
	(*FormatPath_Result)(nil),           // 30: gpyrpc.FormatPath_Result
	(*LintPath_Args)(nil),               // 31: gpyrpc.LintPath_Args
	(*LintPath_Result)(nil),             // 32: gpyrpc.LintPath_Result
	(*OverrideFile_Args)(nil),           // 33: gpyrpc.OverrideFile_Args
	(*OverrideFile_Result)(nil),         // 34: gpyrpc.OverrideFile_Result
	(*ListVariables_Options)(nil),       // 35: gpyrpc.ListVariables_Options
	(*VariableList)(nil),                // 36: gpyrpc.VariableList
	(*ListVariables_Args)(nil),          // 37: gpyrpc.ListVariables_Args
	(*ListVariables_Result)(nil),        // 38: gpyrpc.ListVariables_Result
	(*Variable)(nil),                    // 39: gpyrpc.Variable
	(*MapEntry)(nil),                    // 40: gpyrpc.MapEntry
	(*GetSchemaTypeMapping_Args)(nil),   // 41: gpyrpc.GetSchemaTypeMapping_Args
	(*GetSchemaTypeMapping_Result)(nil), // 42: gpyrpc.GetSchemaTypeMapping_Result
	(*ValidateCode_Args)(nil),           // 43: gpyrpc.ValidateCode_Args
	(*ValidateCode_Result)(nil),         // 44: gpyrpc.ValidateCode_Result
	(*Position)(nil),                    // 45: gpyrpc.Position
	(*ListDepFiles_Args)(nil),           // 46: gpyrpc.ListDepFiles_Args
	(*ListDepFiles_Result)(nil),         // 47: gpyrpc.ListDepFiles_Result
	(*LoadSettingsFiles_Args)(nil),      // 48: gpyrpc.LoadSettingsFiles_Args
	(*LoadSettingsFiles_Result)(nil),    // 49: gpyrpc.LoadSettingsFiles_Result
	(*CliConfig)(nil),                   // 50: gpyrpc.CliConfig
	(*KeyValuePair)(nil),                // 51: gpyrpc.KeyValuePair
	(*Rename_Args)(nil),                 // 52: gpyrpc.Rename_Args
	(*Rename_Result)(nil),               // 53: gpyrpc.Rename_Result
	(*RenameCode_Args)(nil),             // 54: gpyrpc.RenameCode_Args
	(*RenameCode_Result)(nil),           // 55: gpyrpc.RenameCode_Result
	(*Test_Args)(nil),                   // 56: gpyrpc.Test_Args
	(*Test_Result)(nil),                 // 57: gpyrpc.Test_Result
	(*TestCaseInfo)(nil),                // 58: gpyrpc.TestCaseInfo
	(*UpdateDependencies_Args)(nil),     // 59: gpyrpc.UpdateDependencies_Args
	(*UpdateDependencies_Result)(nil),   // 60: gpyrpc.UpdateDependencies_Result
	(*KclType)(nil),                     // 61: gpyrpc.KclType
	(*Decorator)(nil),                   // 62: gpyrpc.Decorator
	(*Example)(nil),                     // 63: gpyrpc.Example
	nil,                                 // 64: gpyrpc.LoadPackage_Result.ScopesEntry
	nil,                                 // 65: gpyrpc.LoadPackage_Result.SymbolsEntry
	nil,                                 // 66: gpyrpc.LoadPackage_Result.NodeSymbolMapEntry
	nil,                                 // 67: gpyrpc.LoadPackage_Result.SymbolNodeMapEntry
	nil,                                 // 68: gpyrpc.LoadPackage_Result.FullyQualifiedNameMapEntry
	nil,                                 // 69: gpyrpc.LoadPackage_Result.PkgScopeMapEntry
	nil,                                 // 70: gpyrpc.ListVariables_Result.VariablesEntry
	nil,                                 // 71: gpyrpc.GetSchemaTypeMapping_Result.SchemaTypeMappingEntry
	nil,                                 // 72: gpyrpc.RenameCode_Args.SourceCodesEntry
	nil,                                 // 73: gpyrpc.RenameCode_Result.ChangedCodesEntry
	nil,                                 // 74: gpyrpc.KclType.PropertiesEntry
	nil,                                 // 75: gpyrpc.KclType.ExamplesEntry
	nil,                                 // 76: gpyrpc.Decorator.KeywordsEntry
}
var file_gpyrpc_proto_depIdxs = []int32{
	3,  // 0: gpyrpc.Error.messages:type_name -> gpyrpc.Message
	45, // 1: gpyrpc.Message.pos:type_name -> gpyrpc.Position
	0,  // 2: gpyrpc.ParseFile_Args.external_pkgs:type_name -> gpyrpc.ExternalPkg
	2,  // 3: gpyrpc.ParseFile_Result.errors:type_name -> gpyrpc.Error
	0,  // 4: gpyrpc.ParseProgram_Args.external_pkgs:type_name -> gpyrpc.ExternalPkg
	2,  // 5: gpyrpc.ParseProgram_Result.errors:type_name -> gpyrpc.Error
	10, // 6: gpyrpc.LoadPackage_Args.parse_args:type_name -> gpyrpc.ParseProgram_Args
	2,  // 7: gpyrpc.LoadPackage_Result.parse_errors:type_name -> gpyrpc.Error
	2,  // 8: gpyrpc.LoadPackage_Result.type_errors:type_name -> gpyrpc.Error
	64, // 9: gpyrpc.LoadPackage_Result.scopes:type_name -> gpyrpc.LoadPackage_Result.ScopesEntry
	65, // 10: gpyrpc.LoadPackage_Result.symbols:type_name -> gpyrpc.LoadPackage_Result.SymbolsEntry
	66, // 11: gpyrpc.LoadPackage_Result.node_symbol_map:type_name -> gpyrpc.LoadPackage_Result.NodeSymbolMapEntry
	67, // 12: gpyrpc.LoadPackage_Result.symbol_node_map:type_name -> gpyrpc.LoadPackage_Result.SymbolNodeMapEntry
	68, // 13: gpyrpc.LoadPackage_Result.fully_qualified_name_map:type_name -> gpyrpc.LoadPackage_Result.FullyQualifiedNameMapEntry
	69, // 14: gpyrpc.LoadPackage_Result.pkg_scope_map:type_name -> gpyrpc.LoadPackage_Result.PkgScopeMapEntry
	15, // 15: gpyrpc.ListOptions_Result.options:type_name -> gpyrpc.OptionHelp
	61, // 16: gpyrpc.Symbol.ty:type_name -> gpyrpc.KclType
	18, // 17: gpyrpc.Symbol.owner:type_name -> gpyrpc.SymbolIndex
	18, // 18: gpyrpc.Symbol.def:type_name -> gpyrpc.SymbolIndex
	18, // 19: gpyrpc.Symbol.attrs:type_name -> gpyrpc.SymbolIndex
	19, // 20: gpyrpc.Scope.parent:type_name -> gpyrpc.ScopeIndex
	18, // 21: gpyrpc.Scope.owner:type_name -> gpyrpc.SymbolIndex
	19, // 22: gpyrpc.Scope.children:type_name -> gpyrpc.ScopeIndex
	18, // 23: gpyrpc.Scope.defs:type_name -> gpyrpc.SymbolIndex
	1,  // 24: gpyrpc.ExecProgram_Args.args:type_name -> gpyrpc.Argument
	0,  // 25: gpyrpc.ExecProgram_Args.external_pkgs:type_name -> gpyrpc.ExternalPkg
	20, // 26: gpyrpc.BuildProgram_Args.exec_args:type_name -> gpyrpc.ExecProgram_Args
	20, // 27: gpyrpc.ExecArtifact_Args.exec_args:type_name -> gpyrpc.ExecProgram_Args
	2,  // 28: gpyrpc.OverrideFile_Result.parse_errors:type_name -> gpyrpc.Error
	39, // 29: gpyrpc.VariableList.variables:type_name -> gpyrpc.Variable
	35, // 30: gpyrpc.ListVariables_Args.options:type_name -> gpyrpc.ListVariables_Options
	70, // 31: gpyrpc.ListVariables_Result.variables:type_name -> gpyrpc.ListVariables_Result.VariablesEntry
	2,  // 32: gpyrpc.ListVariables_Result.parse_errors:type_name -> gpyrpc.Error
	39, // 33: gpyrpc.Variable.list_items:type_name -> gpyrpc.Variable
	40, // 34: gpyrpc.Variable.dict_entries:type_name -> gpyrpc.MapEntry
	39, // 35: gpyrpc.MapEntry.value:type_name -> gpyrpc.Variable
	20, // 36: gpyrpc.GetSchemaTypeMapping_Args.exec_args:type_name -> gpyrpc.ExecProgram_Args
	71, // 37: gpyrpc.GetSchemaTypeMapping_Result.schema_type_mapping:type_name -> gpyrpc.GetSchemaTypeMapping_Result.SchemaTypeMappingEntry
	50, // 38: gpyrpc.LoadSettingsFiles_Result.kcl_cli_configs:type_name -> gpyrpc.CliConfig
	51, // 39: gpyrpc.LoadSettingsFiles_Result.kcl_options:type_name -> gpyrpc.KeyValuePair
	72, // 40: gpyrpc.RenameCode_Args.source_codes:type_name -> gpyrpc.RenameCode_Args.SourceCodesEntry
	73, // 41: gpyrpc.RenameCode_Result.changed_codes:type_name -> gpyrpc.RenameCode_Result.ChangedCodesEntry
	20, // 42: gpyrpc.Test_Args.exec_args:type_name -> gpyrpc.ExecProgram_Args
	58, // 43: gpyrpc.Test_Result.info:type_name -> gpyrpc.TestCaseInfo
	0,  // 44: gpyrpc.UpdateDependencies_Result.external_pkgs:type_name -> gpyrpc.ExternalPkg
	61, // 45: gpyrpc.KclType.union_types:type_name -> gpyrpc.KclType
	74, // 46: gpyrpc.KclType.properties:type_name -> gpyrpc.KclType.PropertiesEntry
	61, // 47: gpyrpc.KclType.key:type_name -> gpyrpc.KclType
	61, // 48: gpyrpc.KclType.item:type_name -> gpyrpc.KclType
	62, // 49: gpyrpc.KclType.decorators:type_name -> gpyrpc.Decorator
	75, // 50: gpyrpc.KclType.examples:type_name -> gpyrpc.KclType.ExamplesEntry
	61, // 51: gpyrpc.KclType.base_schema:type_name -> gpyrpc.KclType
	76, // 52: gpyrpc.Decorator.keywords:type_name -> gpyrpc.Decorator.KeywordsEntry
	17, // 53: gpyrpc.LoadPackage_Result.ScopesEntry.value:type_name -> gpyrpc.Scope
	16, // 54: gpyrpc.LoadPackage_Result.SymbolsEntry.value:type_name -> gpyrpc.Symbol
	18, // 55: gpyrpc.LoadPackage_Result.NodeSymbolMapEntry.value:type_name -> gpyrpc.SymbolIndex
	18, // 56: gpyrpc.LoadPackage_Result.FullyQualifiedNameMapEntry.value:type_name -> gpyrpc.SymbolIndex
	19, // 57: gpyrpc.LoadPackage_Result.PkgScopeMapEntry.value:type_name -> gpyrpc.ScopeIndex
	36, // 58: gpyrpc.ListVariables_Result.VariablesEntry.value:type_name -> gpyrpc.VariableList
	61, // 59: gpyrpc.GetSchemaTypeMapping_Result.SchemaTypeMappingEntry.value:type_name -> gpyrpc.KclType
	61, // 60: gpyrpc.KclType.PropertiesEntry.value:type_name -> gpyrpc.KclType
	63, // 61: gpyrpc.KclType.ExamplesEntry.value:type_name -> gpyrpc.Example
	4,  // 62: gpyrpc.BuiltinService.Ping:input_type -> gpyrpc.Ping_Args
	6,  // 63: gpyrpc.BuiltinService.ListMethod:input_type -> gpyrpc.ListMethod_Args
	4,  // 64: gpyrpc.KclvmService.Ping:input_type -> gpyrpc.Ping_Args
	20, // 65: gpyrpc.KclvmService.ExecProgram:input_type -> gpyrpc.ExecProgram_Args
	22, // 66: gpyrpc.KclvmService.BuildProgram:input_type -> gpyrpc.BuildProgram_Args
	24, // 67: gpyrpc.KclvmService.ExecArtifact:input_type -> gpyrpc.ExecArtifact_Args
	8,  // 68: gpyrpc.KclvmService.ParseFile:input_type -> gpyrpc.ParseFile_Args
	10, // 69: gpyrpc.KclvmService.ParseProgram:input_type -> gpyrpc.ParseProgram_Args
	12, // 70: gpyrpc.KclvmService.LoadPackage:input_type -> gpyrpc.LoadPackage_Args
	10, // 71: gpyrpc.KclvmService.ListOptions:input_type -> gpyrpc.ParseProgram_Args
	37, // 72: gpyrpc.KclvmService.ListVariables:input_type -> gpyrpc.ListVariables_Args
	27, // 73: gpyrpc.KclvmService.FormatCode:input_type -> gpyrpc.FormatCode_Args
	29, // 74: gpyrpc.KclvmService.FormatPath:input_type -> gpyrpc.FormatPath_Args
	31, // 75: gpyrpc.KclvmService.LintPath:input_type -> gpyrpc.LintPath_Args
	33, // 76: gpyrpc.KclvmService.OverrideFile:input_type -> gpyrpc.OverrideFile_Args
	41, // 77: gpyrpc.KclvmService.GetSchemaTypeMapping:input_type -> gpyrpc.GetSchemaTypeMapping_Args
	43, // 78: gpyrpc.KclvmService.ValidateCode:input_type -> gpyrpc.ValidateCode_Args
	46, // 79: gpyrpc.KclvmService.ListDepFiles:input_type -> gpyrpc.ListDepFiles_Args
	48, // 80: gpyrpc.KclvmService.LoadSettingsFiles:input_type -> gpyrpc.LoadSettingsFiles_Args
	52, // 81: gpyrpc.KclvmService.Rename:input_type -> gpyrpc.Rename_Args
	54, // 82: gpyrpc.KclvmService.RenameCode:input_type -> gpyrpc.RenameCode_Args
	56, // 83: gpyrpc.KclvmService.Test:input_type -> gpyrpc.Test_Args
	59, // 84: gpyrpc.KclvmService.UpdateDependencies:input_type -> gpyrpc.UpdateDependencies_Args
	5,  // 85: gpyrpc.BuiltinService.Ping:output_type -> gpyrpc.Ping_Result
	7,  // 86: gpyrpc.BuiltinService.ListMethod:output_type -> gpyrpc.ListMethod_Result
	5,  // 87: gpyrpc.KclvmService.Ping:output_type -> gpyrpc.Ping_Result
	21, // 88: gpyrpc.KclvmService.ExecProgram:output_type -> gpyrpc.ExecProgram_Result
	23, // 89: gpyrpc.KclvmService.BuildProgram:output_type -> gpyrpc.BuildProgram_Result
	21, // 90: gpyrpc.KclvmService.ExecArtifact:output_type -> gpyrpc.ExecProgram_Result
	9,  // 91: gpyrpc.KclvmService.ParseFile:output_type -> gpyrpc.ParseFile_Result
	11, // 92: gpyrpc.KclvmService.ParseProgram:output_type -> gpyrpc.ParseProgram_Result
	13, // 93: gpyrpc.KclvmService.LoadPackage:output_type -> gpyrpc.LoadPackage_Result
	14, // 94: gpyrpc.KclvmService.ListOptions:output_type -> gpyrpc.ListOptions_Result
	38, // 95: gpyrpc.KclvmService.ListVariables:output_type -> gpyrpc.ListVariables_Result
	28, // 96: gpyrpc.KclvmService.FormatCode:output_type -> gpyrpc.FormatCode_Result
	30, // 97: gpyrpc.KclvmService.FormatPath:output_type -> gpyrpc.FormatPath_Result
	32, // 98: gpyrpc.KclvmService.LintPath:output_type -> gpyrpc.LintPath_Result
	34, // 99: gpyrpc.KclvmService.OverrideFile:output_type -> gpyrpc.OverrideFile_Result
	42, // 100: gpyrpc.KclvmService.GetSchemaTypeMapping:output_type -> gpyrpc.GetSchemaTypeMapping_Result
	44, // 101: gpyrpc.KclvmService.ValidateCode:output_type -> gpyrpc.ValidateCode_Result
	47, // 102: gpyrpc.KclvmService.ListDepFiles:output_type -> gpyrpc.ListDepFiles_Result
	49, // 103: gpyrpc.KclvmService.LoadSettingsFiles:output_type -> gpyrpc.LoadSettingsFiles_Result
	53, // 104: gpyrpc.KclvmService.Rename:output_type -> gpyrpc.Rename_Result
	55, // 105: gpyrpc.KclvmService.RenameCode:output_type -> gpyrpc.RenameCode_Result
	57, // 106: gpyrpc.KclvmService.Test:output_type -> gpyrpc.Test_Result
	60, // 107: gpyrpc.KclvmService.UpdateDependencies:output_type -> gpyrpc.UpdateDependencies_Result
	85, // [85:108] is the sub-list for method output_type
	62, // [62:85] is the sub-list for method input_type
	62, // [62:62] is the sub-list for extension type_name
	62, // [62:62] is the sub-list for extension extendee
	0,  // [0:62] is the sub-list for field type_name
}

func init() { file_gpyrpc_proto_init() }
func file_gpyrpc_proto_init() {
	if File_gpyrpc_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_gpyrpc_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*ExternalPkg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gpyrpc_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*Argument); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gpyrpc_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gpyrpc_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gpyrpc_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*Ping_Args); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gpyrpc_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*Ping_Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gpyrpc_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*ListMethod_Args); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gpyrpc_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*ListMethod_Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gpyrpc_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*ParseFile_Args); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gpyrpc_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*ParseFile_Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gpyrpc_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*ParseProgram_Args); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gpyrpc_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*ParseProgram_Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gpyrpc_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*LoadPackage_Args); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gpyrpc_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*LoadPackage_Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gpyrpc_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*ListOptions_Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gpyrpc_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*OptionHelp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gpyrpc_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*Symbol); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gpyrpc_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*Scope); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gpyrpc_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*SymbolIndex); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gpyrpc_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*ScopeIndex); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gpyrpc_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*ExecProgram_Args); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gpyrpc_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*ExecProgram_Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gpyrpc_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*BuildProgram_Args); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gpyrpc_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*BuildProgram_Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gpyrpc_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*ExecArtifact_Args); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gpyrpc_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*ResetPlugin_Args); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gpyrpc_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*ResetPlugin_Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gpyrpc_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*FormatCode_Args); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gpyrpc_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*FormatCode_Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gpyrpc_proto_msgTypes[29].Exporter = func(v any, i int) any {
			switch v := v.(*FormatPath_Args); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gpyrpc_proto_msgTypes[30].Exporter = func(v any, i int) any {
			switch v := v.(*FormatPath_Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gpyrpc_proto_msgTypes[31].Exporter = func(v any, i int) any {
			switch v := v.(*LintPath_Args); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gpyrpc_proto_msgTypes[32].Exporter = func(v any, i int) any {
			switch v := v.(*LintPath_Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gpyrpc_proto_msgTypes[33].Exporter = func(v any, i int) any {
			switch v := v.(*OverrideFile_Args); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gpyrpc_proto_msgTypes[34].Exporter = func(v any, i int) any {
			switch v := v.(*OverrideFile_Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gpyrpc_proto_msgTypes[35].Exporter = func(v any, i int) any {
			switch v := v.(*ListVariables_Options); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gpyrpc_proto_msgTypes[36].Exporter = func(v any, i int) any {
			switch v := v.(*VariableList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gpyrpc_proto_msgTypes[37].Exporter = func(v any, i int) any {
			switch v := v.(*ListVariables_Args); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gpyrpc_proto_msgTypes[38].Exporter = func(v any, i int) any {
			switch v := v.(*ListVariables_Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gpyrpc_proto_msgTypes[39].Exporter = func(v any, i int) any {
			switch v := v.(*Variable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gpyrpc_proto_msgTypes[40].Exporter = func(v any, i int) any {
			switch v := v.(*MapEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gpyrpc_proto_msgTypes[41].Exporter = func(v any, i int) any {
			switch v := v.(*GetSchemaTypeMapping_Args); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gpyrpc_proto_msgTypes[42].Exporter = func(v any, i int) any {
			switch v := v.(*GetSchemaTypeMapping_Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gpyrpc_proto_msgTypes[43].Exporter = func(v any, i int) any {
			switch v := v.(*ValidateCode_Args); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gpyrpc_proto_msgTypes[44].Exporter = func(v any, i int) any {
			switch v := v.(*ValidateCode_Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gpyrpc_proto_msgTypes[45].Exporter = func(v any, i int) any {
			switch v := v.(*Position); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gpyrpc_proto_msgTypes[46].Exporter = func(v any, i int) any {
			switch v := v.(*ListDepFiles_Args); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gpyrpc_proto_msgTypes[47].Exporter = func(v any, i int) any {
			switch v := v.(*ListDepFiles_Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gpyrpc_proto_msgTypes[48].Exporter = func(v any, i int) any {
			switch v := v.(*LoadSettingsFiles_Args); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gpyrpc_proto_msgTypes[49].Exporter = func(v any, i int) any {
			switch v := v.(*LoadSettingsFiles_Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gpyrpc_proto_msgTypes[50].Exporter = func(v any, i int) any {
			switch v := v.(*CliConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gpyrpc_proto_msgTypes[51].Exporter = func(v any, i int) any {
			switch v := v.(*KeyValuePair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gpyrpc_proto_msgTypes[52].Exporter = func(v any, i int) any {
			switch v := v.(*Rename_Args); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gpyrpc_proto_msgTypes[53].Exporter = func(v any, i int) any {
			switch v := v.(*Rename_Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gpyrpc_proto_msgTypes[54].Exporter = func(v any, i int) any {
			switch v := v.(*RenameCode_Args); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gpyrpc_proto_msgTypes[55].Exporter = func(v any, i int) any {
			switch v := v.(*RenameCode_Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gpyrpc_proto_msgTypes[56].Exporter = func(v any, i int) any {
			switch v := v.(*Test_Args); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gpyrpc_proto_msgTypes[57].Exporter = func(v any, i int) any {
			switch v := v.(*Test_Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gpyrpc_proto_msgTypes[58].Exporter = func(v any, i int) any {
			switch v := v.(*TestCaseInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gpyrpc_proto_msgTypes[59].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateDependencies_Args); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gpyrpc_proto_msgTypes[60].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateDependencies_Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gpyrpc_proto_msgTypes[61].Exporter = func(v any, i int) any {
			switch v := v.(*KclType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gpyrpc_proto_msgTypes[62].Exporter = func(v any, i int) any {
			switch v := v.(*Decorator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gpyrpc_proto_msgTypes[63].Exporter = func(v any, i int) any {
			switch v := v.(*Example); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_gpyrpc_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   77,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_gpyrpc_proto_goTypes,
		DependencyIndexes: file_gpyrpc_proto_depIdxs,
		MessageInfos:      file_gpyrpc_proto_msgTypes,
	}.Build()
	File_gpyrpc_proto = out.File
	file_gpyrpc_proto_rawDesc = nil
	file_gpyrpc_proto_goTypes = nil
	file_gpyrpc_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// BuiltinServiceClient is the client API for BuiltinService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BuiltinServiceClient interface {
	Ping(ctx context.Context, in *Ping_Args, opts ...grpc.CallOption) (*Ping_Result, error)
	ListMethod(ctx context.Context, in *ListMethod_Args, opts ...grpc.CallOption) (*ListMethod_Result, error)
}

type builtinServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBuiltinServiceClient(cc grpc.ClientConnInterface) BuiltinServiceClient {
	return &builtinServiceClient{cc}
}

func (c *builtinServiceClient) Ping(ctx context.Context, in *Ping_Args, opts ...grpc.CallOption) (*Ping_Result, error) {
	out := new(Ping_Result)
	err := c.cc.Invoke(ctx, "/gpyrpc.BuiltinService/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *builtinServiceClient) ListMethod(ctx context.Context, in *ListMethod_Args, opts ...grpc.CallOption) (*ListMethod_Result, error) {
	out := new(ListMethod_Result)
	err := c.cc.Invoke(ctx, "/gpyrpc.BuiltinService/ListMethod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BuiltinServiceServer is the server API for BuiltinService service.
type BuiltinServiceServer interface {
	Ping(context.Context, *Ping_Args) (*Ping_Result, error)
	ListMethod(context.Context, *ListMethod_Args) (*ListMethod_Result, error)
}

// UnimplementedBuiltinServiceServer can be embedded to have forward compatible implementations.
type UnimplementedBuiltinServiceServer struct {
}

func (*UnimplementedBuiltinServiceServer) Ping(context.Context, *Ping_Args) (*Ping_Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (*UnimplementedBuiltinServiceServer) ListMethod(context.Context, *ListMethod_Args) (*ListMethod_Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMethod not implemented")
}

func RegisterBuiltinServiceServer(s *grpc.Server, srv BuiltinServiceServer) {
	s.RegisterService(&_BuiltinService_serviceDesc, srv)
}

func _BuiltinService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ping_Args)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuiltinServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gpyrpc.BuiltinService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuiltinServiceServer).Ping(ctx, req.(*Ping_Args))
	}
	return interceptor(ctx, in, info, handler)
}

func _BuiltinService_ListMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMethod_Args)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuiltinServiceServer).ListMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gpyrpc.BuiltinService/ListMethod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuiltinServiceServer).ListMethod(ctx, req.(*ListMethod_Args))
	}
	return interceptor(ctx, in, info, handler)
}

var _BuiltinService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gpyrpc.BuiltinService",
	HandlerType: (*BuiltinServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _BuiltinService_Ping_Handler,
		},
		{
			MethodName: "ListMethod",
			Handler:    _BuiltinService_ListMethod_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gpyrpc.proto",
}

// KclvmServiceClient is the client API for KclvmService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type KclvmServiceClient interface {
	Ping(ctx context.Context, in *Ping_Args, opts ...grpc.CallOption) (*Ping_Result, error)
	ExecProgram(ctx context.Context, in *ExecProgram_Args, opts ...grpc.CallOption) (*ExecProgram_Result, error)
	BuildProgram(ctx context.Context, in *BuildProgram_Args, opts ...grpc.CallOption) (*BuildProgram_Result, error)
	ExecArtifact(ctx context.Context, in *ExecArtifact_Args, opts ...grpc.CallOption) (*ExecProgram_Result, error)
	ParseFile(ctx context.Context, in *ParseFile_Args, opts ...grpc.CallOption) (*ParseFile_Result, error)
	ParseProgram(ctx context.Context, in *ParseProgram_Args, opts ...grpc.CallOption) (*ParseProgram_Result, error)
	LoadPackage(ctx context.Context, in *LoadPackage_Args, opts ...grpc.CallOption) (*LoadPackage_Result, error)
	ListOptions(ctx context.Context, in *ParseProgram_Args, opts ...grpc.CallOption) (*ListOptions_Result, error)
	ListVariables(ctx context.Context, in *ListVariables_Args, opts ...grpc.CallOption) (*ListVariables_Result, error)
	FormatCode(ctx context.Context, in *FormatCode_Args, opts ...grpc.CallOption) (*FormatCode_Result, error)
	FormatPath(ctx context.Context, in *FormatPath_Args, opts ...grpc.CallOption) (*FormatPath_Result, error)
	LintPath(ctx context.Context, in *LintPath_Args, opts ...grpc.CallOption) (*LintPath_Result, error)
	OverrideFile(ctx context.Context, in *OverrideFile_Args, opts ...grpc.CallOption) (*OverrideFile_Result, error)
	GetSchemaTypeMapping(ctx context.Context, in *GetSchemaTypeMapping_Args, opts ...grpc.CallOption) (*GetSchemaTypeMapping_Result, error)
	ValidateCode(ctx context.Context, in *ValidateCode_Args, opts ...grpc.CallOption) (*ValidateCode_Result, error)
	ListDepFiles(ctx context.Context, in *ListDepFiles_Args, opts ...grpc.CallOption) (*ListDepFiles_Result, error)
	LoadSettingsFiles(ctx context.Context, in *LoadSettingsFiles_Args, opts ...grpc.CallOption) (*LoadSettingsFiles_Result, error)
	Rename(ctx context.Context, in *Rename_Args, opts ...grpc.CallOption) (*Rename_Result, error)
	RenameCode(ctx context.Context, in *RenameCode_Args, opts ...grpc.CallOption) (*RenameCode_Result, error)
	Test(ctx context.Context, in *Test_Args, opts ...grpc.CallOption) (*Test_Result, error)
	UpdateDependencies(ctx context.Context, in *UpdateDependencies_Args, opts ...grpc.CallOption) (*UpdateDependencies_Result, error)
}

type kclvmServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKclvmServiceClient(cc grpc.ClientConnInterface) KclvmServiceClient {
	return &kclvmServiceClient{cc}
}

func (c *kclvmServiceClient) Ping(ctx context.Context, in *Ping_Args, opts ...grpc.CallOption) (*Ping_Result, error) {
	out := new(Ping_Result)
	err := c.cc.Invoke(ctx, "/gpyrpc.KclvmService/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kclvmServiceClient) ExecProgram(ctx context.Context, in *ExecProgram_Args, opts ...grpc.CallOption) (*ExecProgram_Result, error) {
	out := new(ExecProgram_Result)
	err := c.cc.Invoke(ctx, "/gpyrpc.KclvmService/ExecProgram", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kclvmServiceClient) BuildProgram(ctx context.Context, in *BuildProgram_Args, opts ...grpc.CallOption) (*BuildProgram_Result, error) {
	out := new(BuildProgram_Result)
	err := c.cc.Invoke(ctx, "/gpyrpc.KclvmService/BuildProgram", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kclvmServiceClient) ExecArtifact(ctx context.Context, in *ExecArtifact_Args, opts ...grpc.CallOption) (*ExecProgram_Result, error) {
	out := new(ExecProgram_Result)
	err := c.cc.Invoke(ctx, "/gpyrpc.KclvmService/ExecArtifact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kclvmServiceClient) ParseFile(ctx context.Context, in *ParseFile_Args, opts ...grpc.CallOption) (*ParseFile_Result, error) {
	out := new(ParseFile_Result)
	err := c.cc.Invoke(ctx, "/gpyrpc.KclvmService/ParseFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kclvmServiceClient) ParseProgram(ctx context.Context, in *ParseProgram_Args, opts ...grpc.CallOption) (*ParseProgram_Result, error) {
	out := new(ParseProgram_Result)
	err := c.cc.Invoke(ctx, "/gpyrpc.KclvmService/ParseProgram", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kclvmServiceClient) LoadPackage(ctx context.Context, in *LoadPackage_Args, opts ...grpc.CallOption) (*LoadPackage_Result, error) {
	out := new(LoadPackage_Result)
	err := c.cc.Invoke(ctx, "/gpyrpc.KclvmService/LoadPackage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kclvmServiceClient) ListOptions(ctx context.Context, in *ParseProgram_Args, opts ...grpc.CallOption) (*ListOptions_Result, error) {
	out := new(ListOptions_Result)
	err := c.cc.Invoke(ctx, "/gpyrpc.KclvmService/ListOptions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kclvmServiceClient) ListVariables(ctx context.Context, in *ListVariables_Args, opts ...grpc.CallOption) (*ListVariables_Result, error) {
	out := new(ListVariables_Result)
	err := c.cc.Invoke(ctx, "/gpyrpc.KclvmService/ListVariables", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kclvmServiceClient) FormatCode(ctx context.Context, in *FormatCode_Args, opts ...grpc.CallOption) (*FormatCode_Result, error) {
	out := new(FormatCode_Result)
	err := c.cc.Invoke(ctx, "/gpyrpc.KclvmService/FormatCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kclvmServiceClient) FormatPath(ctx context.Context, in *FormatPath_Args, opts ...grpc.CallOption) (*FormatPath_Result, error) {
	out := new(FormatPath_Result)
	err := c.cc.Invoke(ctx, "/gpyrpc.KclvmService/FormatPath", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kclvmServiceClient) LintPath(ctx context.Context, in *LintPath_Args, opts ...grpc.CallOption) (*LintPath_Result, error) {
	out := new(LintPath_Result)
	err := c.cc.Invoke(ctx, "/gpyrpc.KclvmService/LintPath", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kclvmServiceClient) OverrideFile(ctx context.Context, in *OverrideFile_Args, opts ...grpc.CallOption) (*OverrideFile_Result, error) {
	out := new(OverrideFile_Result)
	err := c.cc.Invoke(ctx, "/gpyrpc.KclvmService/OverrideFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kclvmServiceClient) GetSchemaTypeMapping(ctx context.Context, in *GetSchemaTypeMapping_Args, opts ...grpc.CallOption) (*GetSchemaTypeMapping_Result, error) {
	out := new(GetSchemaTypeMapping_Result)
	err := c.cc.Invoke(ctx, "/gpyrpc.KclvmService/GetSchemaTypeMapping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kclvmServiceClient) ValidateCode(ctx context.Context, in *ValidateCode_Args, opts ...grpc.CallOption) (*ValidateCode_Result, error) {
	out := new(ValidateCode_Result)
	err := c.cc.Invoke(ctx, "/gpyrpc.KclvmService/ValidateCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kclvmServiceClient) ListDepFiles(ctx context.Context, in *ListDepFiles_Args, opts ...grpc.CallOption) (*ListDepFiles_Result, error) {
	out := new(ListDepFiles_Result)
	err := c.cc.Invoke(ctx, "/gpyrpc.KclvmService/ListDepFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kclvmServiceClient) LoadSettingsFiles(ctx context.Context, in *LoadSettingsFiles_Args, opts ...grpc.CallOption) (*LoadSettingsFiles_Result, error) {
	out := new(LoadSettingsFiles_Result)
	err := c.cc.Invoke(ctx, "/gpyrpc.KclvmService/LoadSettingsFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kclvmServiceClient) Rename(ctx context.Context, in *Rename_Args, opts ...grpc.CallOption) (*Rename_Result, error) {
	out := new(Rename_Result)
	err := c.cc.Invoke(ctx, "/gpyrpc.KclvmService/Rename", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kclvmServiceClient) RenameCode(ctx context.Context, in *RenameCode_Args, opts ...grpc.CallOption) (*RenameCode_Result, error) {
	out := new(RenameCode_Result)
	err := c.cc.Invoke(ctx, "/gpyrpc.KclvmService/RenameCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kclvmServiceClient) Test(ctx context.Context, in *Test_Args, opts ...grpc.CallOption) (*Test_Result, error) {
	out := new(Test_Result)
	err := c.cc.Invoke(ctx, "/gpyrpc.KclvmService/Test", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kclvmServiceClient) UpdateDependencies(ctx context.Context, in *UpdateDependencies_Args, opts ...grpc.CallOption) (*UpdateDependencies_Result, error) {
	out := new(UpdateDependencies_Result)
	err := c.cc.Invoke(ctx, "/gpyrpc.KclvmService/UpdateDependencies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KclvmServiceServer is the server API for KclvmService service.
type KclvmServiceServer interface {
	Ping(context.Context, *Ping_Args) (*Ping_Result, error)
	ExecProgram(context.Context, *ExecProgram_Args) (*ExecProgram_Result, error)
	BuildProgram(context.Context, *BuildProgram_Args) (*BuildProgram_Result, error)
	ExecArtifact(context.Context, *ExecArtifact_Args) (*ExecProgram_Result, error)
	ParseFile(context.Context, *ParseFile_Args) (*ParseFile_Result, error)
	ParseProgram(context.Context, *ParseProgram_Args) (*ParseProgram_Result, error)
	LoadPackage(context.Context, *LoadPackage_Args) (*LoadPackage_Result, error)
	ListOptions(context.Context, *ParseProgram_Args) (*ListOptions_Result, error)
	ListVariables(context.Context, *ListVariables_Args) (*ListVariables_Result, error)
	FormatCode(context.Context, *FormatCode_Args) (*FormatCode_Result, error)
	FormatPath(context.Context, *FormatPath_Args) (*FormatPath_Result, error)
	LintPath(context.Context, *LintPath_Args) (*LintPath_Result, error)
	OverrideFile(context.Context, *OverrideFile_Args) (*OverrideFile_Result, error)
	GetSchemaTypeMapping(context.Context, *GetSchemaTypeMapping_Args) (*GetSchemaTypeMapping_Result, error)
	ValidateCode(context.Context, *ValidateCode_Args) (*ValidateCode_Result, error)
	ListDepFiles(context.Context, *ListDepFiles_Args) (*ListDepFiles_Result, error)
	LoadSettingsFiles(context.Context, *LoadSettingsFiles_Args) (*LoadSettingsFiles_Result, error)
	Rename(context.Context, *Rename_Args) (*Rename_Result, error)
	RenameCode(context.Context, *RenameCode_Args) (*RenameCode_Result, error)
	Test(context.Context, *Test_Args) (*Test_Result, error)
	UpdateDependencies(context.Context, *UpdateDependencies_Args) (*UpdateDependencies_Result, error)
}

// UnimplementedKclvmServiceServer can be embedded to have forward compatible implementations.
type UnimplementedKclvmServiceServer struct {
}

func (*UnimplementedKclvmServiceServer) Ping(context.Context, *Ping_Args) (*Ping_Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (*UnimplementedKclvmServiceServer) ExecProgram(context.Context, *ExecProgram_Args) (*ExecProgram_Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecProgram not implemented")
}
func (*UnimplementedKclvmServiceServer) BuildProgram(context.Context, *BuildProgram_Args) (*BuildProgram_Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuildProgram not implemented")
}
func (*UnimplementedKclvmServiceServer) ExecArtifact(context.Context, *ExecArtifact_Args) (*ExecProgram_Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecArtifact not implemented")
}
func (*UnimplementedKclvmServiceServer) ParseFile(context.Context, *ParseFile_Args) (*ParseFile_Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ParseFile not implemented")
}
func (*UnimplementedKclvmServiceServer) ParseProgram(context.Context, *ParseProgram_Args) (*ParseProgram_Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ParseProgram not implemented")
}
func (*UnimplementedKclvmServiceServer) LoadPackage(context.Context, *LoadPackage_Args) (*LoadPackage_Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadPackage not implemented")
}
func (*UnimplementedKclvmServiceServer) ListOptions(context.Context, *ParseProgram_Args) (*ListOptions_Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOptions not implemented")
}
func (*UnimplementedKclvmServiceServer) ListVariables(context.Context, *ListVariables_Args) (*ListVariables_Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVariables not implemented")
}
func (*UnimplementedKclvmServiceServer) FormatCode(context.Context, *FormatCode_Args) (*FormatCode_Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FormatCode not implemented")
}
func (*UnimplementedKclvmServiceServer) FormatPath(context.Context, *FormatPath_Args) (*FormatPath_Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FormatPath not implemented")
}
func (*UnimplementedKclvmServiceServer) LintPath(context.Context, *LintPath_Args) (*LintPath_Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LintPath not implemented")
}
func (*UnimplementedKclvmServiceServer) OverrideFile(context.Context, *OverrideFile_Args) (*OverrideFile_Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OverrideFile not implemented")
}
func (*UnimplementedKclvmServiceServer) GetSchemaTypeMapping(context.Context, *GetSchemaTypeMapping_Args) (*GetSchemaTypeMapping_Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSchemaTypeMapping not implemented")
}
func (*UnimplementedKclvmServiceServer) ValidateCode(context.Context, *ValidateCode_Args) (*ValidateCode_Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateCode not implemented")
}
func (*UnimplementedKclvmServiceServer) ListDepFiles(context.Context, *ListDepFiles_Args) (*ListDepFiles_Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDepFiles not implemented")
}
func (*UnimplementedKclvmServiceServer) LoadSettingsFiles(context.Context, *LoadSettingsFiles_Args) (*LoadSettingsFiles_Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadSettingsFiles not implemented")
}
func (*UnimplementedKclvmServiceServer) Rename(context.Context, *Rename_Args) (*Rename_Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rename not implemented")
}
func (*UnimplementedKclvmServiceServer) RenameCode(context.Context, *RenameCode_Args) (*RenameCode_Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenameCode not implemented")
}
func (*UnimplementedKclvmServiceServer) Test(context.Context, *Test_Args) (*Test_Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Test not implemented")
}
func (*UnimplementedKclvmServiceServer) UpdateDependencies(context.Context, *UpdateDependencies_Args) (*UpdateDependencies_Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDependencies not implemented")
}

func RegisterKclvmServiceServer(s *grpc.Server, srv KclvmServiceServer) {
	s.RegisterService(&_KclvmService_serviceDesc, srv)
}

func _KclvmService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ping_Args)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KclvmServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gpyrpc.KclvmService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KclvmServiceServer).Ping(ctx, req.(*Ping_Args))
	}
	return interceptor(ctx, in, info, handler)
}

func _KclvmService_ExecProgram_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecProgram_Args)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KclvmServiceServer).ExecProgram(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gpyrpc.KclvmService/ExecProgram",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KclvmServiceServer).ExecProgram(ctx, req.(*ExecProgram_Args))
	}
	return interceptor(ctx, in, info, handler)
}

func _KclvmService_BuildProgram_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuildProgram_Args)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KclvmServiceServer).BuildProgram(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gpyrpc.KclvmService/BuildProgram",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KclvmServiceServer).BuildProgram(ctx, req.(*BuildProgram_Args))
	}
	return interceptor(ctx, in, info, handler)
}

func _KclvmService_ExecArtifact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecArtifact_Args)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KclvmServiceServer).ExecArtifact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gpyrpc.KclvmService/ExecArtifact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KclvmServiceServer).ExecArtifact(ctx, req.(*ExecArtifact_Args))
	}
	return interceptor(ctx, in, info, handler)
}

func _KclvmService_ParseFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParseFile_Args)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KclvmServiceServer).ParseFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gpyrpc.KclvmService/ParseFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KclvmServiceServer).ParseFile(ctx, req.(*ParseFile_Args))
	}
	return interceptor(ctx, in, info, handler)
}

func _KclvmService_ParseProgram_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParseProgram_Args)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KclvmServiceServer).ParseProgram(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gpyrpc.KclvmService/ParseProgram",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KclvmServiceServer).ParseProgram(ctx, req.(*ParseProgram_Args))
	}
	return interceptor(ctx, in, info, handler)
}

func _KclvmService_LoadPackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadPackage_Args)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KclvmServiceServer).LoadPackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gpyrpc.KclvmService/LoadPackage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KclvmServiceServer).LoadPackage(ctx, req.(*LoadPackage_Args))
	}
	return interceptor(ctx, in, info, handler)
}

func _KclvmService_ListOptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParseProgram_Args)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KclvmServiceServer).ListOptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gpyrpc.KclvmService/ListOptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KclvmServiceServer).ListOptions(ctx, req.(*ParseProgram_Args))
	}
	return interceptor(ctx, in, info, handler)
}

func _KclvmService_ListVariables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVariables_Args)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KclvmServiceServer).ListVariables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gpyrpc.KclvmService/ListVariables",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KclvmServiceServer).ListVariables(ctx, req.(*ListVariables_Args))
	}
	return interceptor(ctx, in, info, handler)
}

func _KclvmService_FormatCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FormatCode_Args)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KclvmServiceServer).FormatCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gpyrpc.KclvmService/FormatCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KclvmServiceServer).FormatCode(ctx, req.(*FormatCode_Args))
	}
	return interceptor(ctx, in, info, handler)
}

func _KclvmService_FormatPath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FormatPath_Args)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KclvmServiceServer).FormatPath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gpyrpc.KclvmService/FormatPath",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KclvmServiceServer).FormatPath(ctx, req.(*FormatPath_Args))
	}
	return interceptor(ctx, in, info, handler)
}

func _KclvmService_LintPath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LintPath_Args)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KclvmServiceServer).LintPath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gpyrpc.KclvmService/LintPath",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KclvmServiceServer).LintPath(ctx, req.(*LintPath_Args))
	}
	return interceptor(ctx, in, info, handler)
}

func _KclvmService_OverrideFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OverrideFile_Args)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KclvmServiceServer).OverrideFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gpyrpc.KclvmService/OverrideFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KclvmServiceServer).OverrideFile(ctx, req.(*OverrideFile_Args))
	}
	return interceptor(ctx, in, info, handler)
}

func _KclvmService_GetSchemaTypeMapping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSchemaTypeMapping_Args)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KclvmServiceServer).GetSchemaTypeMapping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gpyrpc.KclvmService/GetSchemaTypeMapping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KclvmServiceServer).GetSchemaTypeMapping(ctx, req.(*GetSchemaTypeMapping_Args))
	}
	return interceptor(ctx, in, info, handler)
}

func _KclvmService_ValidateCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateCode_Args)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KclvmServiceServer).ValidateCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gpyrpc.KclvmService/ValidateCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KclvmServiceServer).ValidateCode(ctx, req.(*ValidateCode_Args))
	}
	return interceptor(ctx, in, info, handler)
}

func _KclvmService_ListDepFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDepFiles_Args)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KclvmServiceServer).ListDepFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gpyrpc.KclvmService/ListDepFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KclvmServiceServer).ListDepFiles(ctx, req.(*ListDepFiles_Args))
	}
	return interceptor(ctx, in, info, handler)
}

func _KclvmService_LoadSettingsFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadSettingsFiles_Args)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KclvmServiceServer).LoadSettingsFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gpyrpc.KclvmService/LoadSettingsFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KclvmServiceServer).LoadSettingsFiles(ctx, req.(*LoadSettingsFiles_Args))
	}
	return interceptor(ctx, in, info, handler)
}

func _KclvmService_Rename_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Rename_Args)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KclvmServiceServer).Rename(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gpyrpc.KclvmService/Rename",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KclvmServiceServer).Rename(ctx, req.(*Rename_Args))
	}
	return interceptor(ctx, in, info, handler)
}

func _KclvmService_RenameCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenameCode_Args)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KclvmServiceServer).RenameCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gpyrpc.KclvmService/RenameCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KclvmServiceServer).RenameCode(ctx, req.(*RenameCode_Args))
	}
	return interceptor(ctx, in, info, handler)
}

func _KclvmService_Test_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Test_Args)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KclvmServiceServer).Test(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gpyrpc.KclvmService/Test",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KclvmServiceServer).Test(ctx, req.(*Test_Args))
	}
	return interceptor(ctx, in, info, handler)
}

func _KclvmService_UpdateDependencies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDependencies_Args)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KclvmServiceServer).UpdateDependencies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gpyrpc.KclvmService/UpdateDependencies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KclvmServiceServer).UpdateDependencies(ctx, req.(*UpdateDependencies_Args))
	}
	return interceptor(ctx, in, info, handler)
}

var _KclvmService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gpyrpc.KclvmService",
	HandlerType: (*KclvmServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _KclvmService_Ping_Handler,
		},
		{
			MethodName: "ExecProgram",
			Handler:    _KclvmService_ExecProgram_Handler,
		},
		{
			MethodName: "BuildProgram",
			Handler:    _KclvmService_BuildProgram_Handler,
		},
		{
			MethodName: "ExecArtifact",
			Handler:    _KclvmService_ExecArtifact_Handler,
		},
		{
			MethodName: "ParseFile",
			Handler:    _KclvmService_ParseFile_Handler,
		},
		{
			MethodName: "ParseProgram",
			Handler:    _KclvmService_ParseProgram_Handler,
		},
		{
			MethodName: "LoadPackage",
			Handler:    _KclvmService_LoadPackage_Handler,
		},
		{
			MethodName: "ListOptions",
			Handler:    _KclvmService_ListOptions_Handler,
		},
		{
			MethodName: "ListVariables",
			Handler:    _KclvmService_ListVariables_Handler,
		},
		{
			MethodName: "FormatCode",
			Handler:    _KclvmService_FormatCode_Handler,
		},
		{
			MethodName: "FormatPath",
			Handler:    _KclvmService_FormatPath_Handler,
		},
		{
			MethodName: "LintPath",
			Handler:    _KclvmService_LintPath_Handler,
		},
		{
			MethodName: "OverrideFile",
			Handler:    _KclvmService_OverrideFile_Handler,
		},
		{
			MethodName: "GetSchemaTypeMapping",
			Handler:    _KclvmService_GetSchemaTypeMapping_Handler,
		},
		{
			MethodName: "ValidateCode",
			Handler:    _KclvmService_ValidateCode_Handler,
		},
		{
			MethodName: "ListDepFiles",
			Handler:    _KclvmService_ListDepFiles_Handler,
		},
		{
			MethodName: "LoadSettingsFiles",
			Handler:    _KclvmService_LoadSettingsFiles_Handler,
		},
		{
			MethodName: "Rename",
			Handler:    _KclvmService_Rename_Handler,
		},
		{
			MethodName: "RenameCode",
			Handler:    _KclvmService_RenameCode_Handler,
		},
		{
			MethodName: "Test",
			Handler:    _KclvmService_Test_Handler,
		},
		{
			MethodName: "UpdateDependencies",
			Handler:    _KclvmService_UpdateDependencies_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gpyrpc.proto",
}
